{
  "PHP Info": {
    "prefix": "cotrInfo",
    "body": [
      "Typing: Dynamically typed",
      "Paradigm: Multi-paradigm: imperative, object-oriented, procedural, reflective",
      "Compilation: Interpreted",
      "Concurrency: Supports multi-threading with extensions like pthreads, but traditionally single-threaded"
    ],
    "description": "Provides general information about the PHP programming language."
  },
  "PHP Entry Point": {
    "prefix": "cotrEntry",
    "body": [
      "// PHP Entry Point",
      "// To run this program, use: `php filename.php`",
      "",
      "<?php",
      "echo 'Hello, World!';",
      "?>"
    ],
    "description": "Creates the entry point of a PHP application."
  },
  "PHP Project Structure (High-Level)": {
    "prefix": "cotrStructure",
    "body": [
      "// Recommended High-Level PHP Project Structure:",
      "",
      "// - public/",
      "//   - Contains publicly accessible files (e.g., index.php).",
      "// - src/",
      "//   - Contains all source code.",
      "// - vendor/",
      "//   - Contains installed dependencies (if using Composer).",
      "// - tests/",
      "//   - Contains unit tests.",
      "",
      "// Note:",
      "// - This is a basic structure; adjust based on project complexity and preferences."
    ],
    "description": "Explains a high-level project structure for PHP."
  },
  "PHP Project Structure (Feature/Module)": {
    "prefix": "cotrStructureFeatures",
    "body": [
      "// Recommended PHP Source Directory Organization (Feature/Module):",
      "",
      "// - src/",
      "//   - rendering/",
      "//     - Contains source code for rendering features.",
      "//   - authentication/",
      "//     - Contains source code for authentication features.",
      "//   - database/",
      "//     - Contains source code for database interactions.",
      "//   - ... (Organize by feature or module)",
      "",
      "// Note:",
      "// - This approach promotes modularity and is suitable for larger projects."
    ],
    "description": "Explains a feature/module-based source directory organization for PHP."
  },
  "PHP Project Structure (File Type)": {
    "prefix": "cotrStructureFiles",
    "body": [
      "// Recommended PHP Source Directory Organization (File Type):",
      "",
      "// - src/",
      "//   - models/",
      "//     - Contains data models and classes.",
      "//   - views/",
      "//     - Contains templates and presentation logic.",
      "//   - controllers/",
      "//     - Contains logic for handling requests.",
      "//   - ... (Organize by file type)",
      "",
      "// Note:",
      "// - This approach is common in web applications and MVC patterns."
    ],
    "description": "Explains a file type-based source directory organization for PHP."
  },
  "PHP Mathematical Operators": {
    "prefix": "cotrOperators",
    "body": [
      "// PHP Mathematical Operators",
      "// Addition: +",
      "// Subtraction: -",
      "// Multiplication: *",
      "// Exponentiation: **",
      "// Division: /",
      "// Modulus (Remainder): %",
      "// Increment: ++",
      "// Decrement: --",
      "// Assignment: =",
      "// Addition assignment: +=",
      "// Subtraction assignment: -=",
      "// Multiplication assignment: *=",
      "// Division assignment: /=",
      "// Modulus assignment: %="
    ],
    "description": "Lists the mathematical operators in PHP."
  },
  "PHP Types": {
    "prefix": "cotrTypes",
    "body": [
      "$BLOCK_COMMENT_START",
      "PHP is a dynamically typed language.",
      "",
      "Types in PHP include:",
      "- int: Integer",
      "- float: Floating-point number",
      "- string: A sequence of characters",
      "- bool: Boolean",
      "- array: An ordered map",
      "- object: An instance of a class",
      "- resource: Holds a reference to an external resource",
      "- NULL: Represents a variable with no value",
      "- callable: A type that can be called, such as a function or a method",
      "- iterable: A type that can be iterated over, such as an array or an object implementing the Traversable interface",
      "- mixed: Indicates that a parameter may accept multiple (but not all) types",
      "- void: Indicates that a function does not return a value",
      "- never: Indicates that a function does not return normally (it either throws an exception or terminates the script)",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Lists all types in PHP."
  },
  "PHP String Type": {
    "prefix": "cotrTypesString",
    "body": ["string"],
    "description": "The PHP string type."
  },
  "PHP Integer Type": {
    "prefix": "cotrTypesInt",
    "body": ["int"],
    "description": "The PHP int type."
  },
  "PHP Float Type": {
    "prefix": "cotrTypesNum",
    "body": ["float"],
    "description": "The PHP float type."
  },
  "PHP Boolean Type": {
    "prefix": "cotrTypesBool",
    "body": ["bool"],
    "description": "The PHP bool type."
  },
  "PHP Boolean True": {
    "prefix": "cotrTypesBoolTrue",
    "body": ["true"],
    "description": "The PHP true value."
  },
  "PHP Boolean False": {
    "prefix": "cotrTypesBoolFalse",
    "body": ["false"],
    "description": "The PHP false value."
  },
  "PHP Null Type": {
    "prefix": "cotrNull",
    "body": ["null"],
    "description": "The PHP null value."
  },
  "PHP Date Type": {
    "prefix": "cotrTypesDate",
    "body": ["DateTime"],
    "description": "The PHP DateTime type."
  },
  "PHP Map Type": {
    "prefix": "cotrTypesMap",
    "body": ["// In PHP, associative arrays are used as maps."],
    "description": "Explains the use of associative arrays as maps in PHP."
  },
  "PHP List Type": {
    "prefix": "cotrTypesList",
    "body": ["// In PHP, indexed arrays are used as lists."],
    "description": "Explains the use of indexed arrays as lists in PHP."
  },
  "PHP Dynamic Type": {
    "prefix": "cotrTypesDynamic",
    "body": ["// PHP is a dynamically typed language."],
    "description": "Explains that PHP is a dynamically typed language."
  },
  "PHP Create Variable": {
    "prefix": "cotrVar",
    "body": ["$${1:myVar} = $2;"],
    "description": "Creates a variable in PHP."
  },
  "Variable Declaration Syntax": {
    "prefix": "cotrVarSyntax",
    "body": [
      "// PHP Variable Declaration Syntax:",
      "",
      "// - $: (Scope: Global or Function)",
      "//   - Variables start with a dollar sign.",
      "//   - Can be reassigned and redeclared within their scope.",
      "//   - Use with caution due to potential scoping issues.",
      "",
      "// - const: (Scope: Global)",
      "//   - Cannot be reassigned or redeclared.",
      "//   - Use for values that should remain constant.",
      "",
      "// Note:",
      "// - PHP does not have a direct equivalent to 'let'.",
      "// - Use '$' for most variable declarations.",
      "// - Use 'const' for values that are known at compile time."
    ],
    "description": "Explains PHP variable declaration syntax"
  },
  "PHP Create Typed Variable": {
    "prefix": "cotrVarTyped",
    "body": [
      "// PHP is a dynamically typed language, which means that by default there is no need to specify the type",
      "//  of a variable, as this will be determined at runtime.",
      "//  However, it is possible to statically type some aspect of the language via the use of type declarations.",
      "${1:Type} $${2:myVar} = $3;"
    ],
    "description": "Creates a typed variable in PHP."
  },
  "PHP Create Nullable Variable": {
    "prefix": "cotrVarNullable",
    "body": ["${1:Type}? $${2:myVar} = $3;"],
    "description": "Creates a nullable variable in PHP."
  },
  "PHP Create String Variable": {
    "prefix": "cotrVarString",
    "body": ["$${1:myString} = '${2:Your string here}';"],
    "description": "Creates a string variable in PHP."
  },
  "PHP Create Multi-Line String Variable": {
    "prefix": "cotrVarMultiString",
    "body": ["$${1:myString} = <<<EOT", "${2:Your string here}", "EOT;"],
    "description": "Creates a multi-line string variable in PHP."
  },
  "PHP Interpolate String": {
    "prefix": "cotrInterpolate",
    "body": ["'Your string here \\${${1:variable}}'"],
    "description": "Interpolates a variable into a string in PHP."
  },
  "PHP Concatenate Strings": {
    "prefix": "cotrConcat",
    "body": ["'${1:string1}' . '${2:string2}'"],
    "description": "Concatenates two strings in PHP."
  },
  "PHP Create Integer Variable": {
    "prefix": "cotrVarInt",
    "body": ["$${1:myInt} = ${2:0};"],
    "description": "Creates an integer variable in PHP."
  },
  "PHP Create Float Variable": {
    "prefix": "cotrVarFloat",
    "body": ["$${1:myFloat} = ${2:0.0};"],
    "description": "Creates a float variable in PHP."
  },
  "PHP Create Boolean Variable": {
    "prefix": "cotrVarBool",
    "body": ["$${1:myBool} = ${2:true};"],
    "description": "Creates a boolean variable in PHP."
  },
  "PHP Create Array Variable": {
    "prefix": "cotrVarList",
    "body": ["$${1:myArray} = [${2:items}];"],
    "description": "Creates an array variable in PHP."
  },
  "PHP Create Map Variable": {
    "prefix": "cotrVarMap",
    "body": ["$${1:myMap} = [${2:key} => ${3:value}];"],
    "description": "Creates a map variable in PHP."
  },
  "PHP Create Date Variable": {
    "prefix": "cotrVarDate",
    "body": ["$${1:myDate} = new DateTime('${2:Y-m-d}');"],
    "description": "Creates a date variable in PHP."
  },
  "PHP Create Constant": {
    "prefix": "cotrConst",
    "body": ["const $${1:myConst} = $2;"],
    "description": "Creates a constant variable in PHP using the const keyword."
  },
  "PHP Static Variable": {
    "prefix": "cotrStaticVar",
    "body": ["static $${1:myStaticVar} = $2;"],
    "description": "Creates a static variable in a PHP class."
  },
  "PHP Generate Array": {
    "prefix": "cotrGenList",
    "body": ["$${1:myArray} = range(${2:0}, ${3:10});"],
    "description": "Generates an array of a specific length in PHP."
  },
  "PHP Generate Map": {
    "prefix": "cotrGenMap",
    "body": [
      "$${1:myMap} = array_combine(range(${2:0}, ${3:10}), range(${4:0}, ${5:10}));"
    ],
    "description": "Generates a map with a specific number of key-value pairs in PHP."
  },
  "PHP Print": {
    "prefix": "cotrPrint",
    "body": ["print('${1:Your message here}');"],
    "description": "Prints a message to the console in PHP."
  },
  "PHP Print Multi": {
    "prefix": "cotrPrintMulti",
    "body": [
      "echo <<<EOT",
      "${1:Line 1}",
      "${2:Line 2}",
      "${3:Line 3}",
      "EOT;"
    ],
    "description": "Prints a multi-line message to the console in PHP."
  },
  "PHP For Loop": {
    "prefix": "cotrForLoop",
    "body": [
      "for ($${1:i} = 0; $1 < ${2:10}; $1++) {",
      "  // Your code here",
      "}"
    ],
    "description": "Creates a for loop that iterates through a set of numbers with the index in PHP."
  },
  "PHP For Each Loop": {
    "prefix": "cotrForEachLoop",
    "body": [
      "foreach ($${1:iterable} as $${2:item}) {",
      "  ${3:// Your code here}",
      "}"
    ],
    "description": "Iterates over an iterable object in PHP."
  },
  "PHP While Loop": {
    "prefix": "cotrWhileLoop",
    "body": ["while ($${1:condition}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates a while loop in PHP."
  },
  "PHP Do While Loop": {
    "prefix": "cotrDoWhileLoop",
    "body": ["do {", "  ${1:// Your code here}", "} while ($${2:condition});"],
    "description": "Creates a do...while loop in PHP."
  },
  "PHP Switch Statement": {
    "prefix": "cotrSwitch",
    "body": [
      "switch ($${1:variable}) {",
      "  case ${2:value1}:",
      "    ${3:// Your code here}",
      "    break;",
      "  case ${4:value2}:",
      "    ${5:// Your code here}",
      "    break;",
      "  default:",
      "    ${6:// Your code here}",
      "}"
    ],
    "description": "Creates a switch statement in PHP."
  },
  "PHP Function": {
    "prefix": "cotrFunc",
    "body": [
      "function ${2:myFunction}(${3:parameters}) {",
      "  ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a function in PHP."
  },
  "PHP Function Args": {
    "prefix": "cotrFuncArgs",
    "body": [
      "// In PHP, functions can have arguments with default values.",
      "function ${2:myFunction}(${3:$arg1}, ${4:$arg2} = '${5:defaultVal}') {",
      "  ${6:// Your code here}",
      "}"
    ],
    "description": "Creates a function with arguments in PHP, including an argument with a default value."
  },
  "PHP Function Named Args": {
    "prefix": "cotrFuncArgsNamed",
    "body": [
      "// Note: PHP does not support named arguments in function definitions."
    ],
    "description": "Note about named arguments in PHP."
  },
  "PHP Arrow Function": {
    "prefix": "cotrFuncArrow",
    "body": [
      "$${2:myFunction} = fn(${3:parameters}) => ${4:// Your code here};"
    ],
    "description": "Creates an arrow function in PHP."
  },
  "PHP Anonymous Function": {
    "prefix": "cotrFuncAnon",
    "body": [
      "$${2:myFunction} = function(${3:parameters}) {",
      "    ${4:// Your code here}",
      "};"
    ],
    "description": "Creates an anonymous function in PHP."
  },
  "PHP Lambda Function": {
    "prefix": ["cotrFuncLambda", "cotrLambda"],
    "body": ["function (${1:parameters}) => ${2:expression}"],
    "description": "Creates a lambda function in PHP."
  },
  "PHP Function Syntax": {
    "prefix": "cotrFuncSyntax",
    "body": [
      "// PHP Function Syntax",
      "// Basic function: function functionName(parameters) { ... }",
      "// Function with arguments: function functionName($arg1, $arg2, ...) { ... }",
      "// Note: PHP does not support named arguments in function definitions."
    ],
    "description": "Outlines the syntax for functions in PHP."
  },
  "PHP Comment": {
    "prefix": "cotrComment",
    "body": ["// ${1:Your comment here}"],
    "description": "Creates a single-line comment in PHP."
  },
  "PHP Multi-Line Comment": {
    "prefix": "cotrCommentMulti",
    "body": ["/*", " * ${1:Your comment here}", " */"],
    "description": "Creates a multi-line comment in PHP."
  },
  "PHP Throw Exception": {
    "prefix": "cotrThrow",
    "body": ["throw new ${1:Exception}('${2:Your message here}');"],
    "description": "Throws an exception in PHP."
  },
  "PHP Try Catch": {
    "prefix": "cotrTryCatch",
    "body": [
      "try {",
      "  ${1:// Your code here}",
      "} catch (${2:Exception} $${3:e}) {",
      "  ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a try...catch block in PHP."
  },
  "PHP Class": {
    "prefix": "cotrClass",
    "body": ["class ${1:MyClass} {", "  ${2:// Your code here}", "}"],
    "description": "Creates a class in PHP."
  },
  "PHP Enum": {
    "prefix": "cotrEnum",
    "body": [
      "abstract class ${1:MyEnum} {",
      "  const ${2:VALUE1} = ${3:0};",
      "  const ${4:VALUE2} = ${5:1};",
      "  // Add more values here",
      "}"
    ],
    "description": "Creates an enum in PHP."
  },
  "PHP If Statement": {
    "prefix": "cotrIf",
    "body": ["if (${1:condition}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates an if statement in PHP."
  },
  "PHP If Else Statement": {
    "prefix": "cotrIfElse",
    "body": [
      "if (${1:condition}) {",
      "  ${2:// Your code here}",
      "} else {",
      "  ${3:// Your code here}",
      "}"
    ],
    "description": "Creates an if...else statement in PHP."
  },
  "PHP Ternary Operator": {
    "prefix": "cotrTernary",
    "body": ["${1:condition} ? ${2:trueValue} : ${3:falseValue}"],
    "description": "Creates a ternary operator in PHP."
  }
}
