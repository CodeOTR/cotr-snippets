{
  "Rust Info": {
    "prefix": ["cotrInfo", "languageInfo", "info"],
    "body": [
      "Typing: Statically typed",
      "Paradigm: Multi-paradigm: imperative, functional, concurrent",
      "Compilation: Compiled",
      "Concurrency: Built-in support for concurrency with ownership and borrowing, and asynchronous programming with async/await"
    ],
    "description": "Provides general information about the Rust programming language."
  },
  "Rust Entry Point": {
    "prefix": ["cotrEntry", "entry", "start", "startingPoint"],
    "body": [
      "// Rust Entry Point",
      "// To run this program, use: `cargo run`",
      "// Note: This assumes you are using Cargo, Rust's package manager and build tool.",
      "",
      "fn main() {",
      "    println!(\"Hello, World!\");",
      "}"
    ],
    "description": "Creates the entry point of a Rust application."
  },
  "Rust Project Structure (High-Level)": {
    "prefix": ["cotrStructure", "structure", "architecture"],
    "body": [
      "// Recommended High-Level Rust Project Structure:",
      "",
      "// - Cargo.toml: The manifest file for Rustâ€™s package manager, Cargo.",
      "// - src/",
      "//   - lib.rs: The entry point for library crates.",
      "//   - main.rs: The entry point for binary crates (executable applications).",
      "//   - /bin/: Additional binaries can be placed here as separate .rs files.",
      "//   - /modules/: Organize code by feature in different modules (files or directories).",
      "",
      "// - tests/",
      "//   - Integration tests go here, in separate files or directories.",
      "",
      "// - examples/",
      "//   - Example programs demonstrating the use of the crate.",
      "",
      "// - benches/",
      "//   - Benchmarks go here, using the built-in benchmarking support in Rust.",
      "",
      "// - target/",
      "//   - Generated by Cargo, contains compilation artifacts and executables.",
      "",
      "// - .cargo/",
      "//   - Configuration for Cargo can be placed here.",
      "",
      "// Note:",
      "// - This structure supports both library and executable projects.",
      "// - Use Cargo workspaces for multi-crate projects."
    ],
    "description": "Explains a high-level project structure for Rust."
  },
  "Rust Mathematical Operators": {
    "prefix": ["cotrOperators", "operators", "mathDocs"],
    "body": [
      "// Rust Mathematical Operators",
      "// Addition: +",
      "// Subtraction: -",
      "// Multiplication: *",
      "// Division: /",
      "// Modulus (Remainder): %",
      "// Exponentiation: Not directly supported, use `f32::powi` or `f64::powf` for floating-point numbers",
      "// Increment: Not directly supported, use `+= 1`",
      "// Decrement: Not directly supported, use `-= 1`",
      "// Assignment: =",
      "// Addition assignment: +=",
      "// Subtraction assignment: -=",
      "// Multiplication assignment: *=",
      "// Division assignment: /=",
      "// Modulus assignment: %="
    ],
    "description": "Lists the mathematical operators in Rust."
  },
  "Rust Equal To": {
    "prefix": ["cotrEqual", "equal"],
    "body": ["=="],
    "description": "Rust equal to operator."
  },
  "Rust Not Equal To": {
    "prefix": ["cotrNotEqual", "notEqual", "doesNotEqual"],
    "body": ["!="],
    "description": "Rust not equal to operator."
  },
  "Rust Boolean Operators": {
    "prefix": ["cotrOperatorsBool", "booleanOperators", "logic"],
    "body": [
      "// Rust Boolean Operators",
      "// Logical AND: &&",
      "// Logical OR: ||",
      "// Logical NOT: !",
      "// Equality: ==",
      "// Inequality: !=",
      "// Greater than: >",
      "// Less than: <",
      "// Greater than or equal to: >=",
      "// Less than or equal to: <="
    ],
    "description": "Lists the boolean operators in Rust."
  },
  "Rust Type Check": {
    "prefix": ["cotrTypeCheck", "checkType", "getType", "typeOf"],
    "body": ["${1:variable}.type()"],
    "description": "Gets the type of a variable in Rust."
  },
  "Rust This Type Check": {
    "prefix": ["thisTypeCheck", "thisType", "getThisType"],
    "body": ["$CLIPBOARD.type_id()"],
    "description": "Gets the type of the variable in the clipboard in Rust."
  },

  "Rust Type Comparison": {
    "prefix": ["cotrTypeCompare", "compareTypes"],
    "body": [
      "// Check if two variables have the same type:",
      "if ${1:variable1}.type_id() == ${2:variable2}.type_id() {",
      "  // Your code here",
      "}"
    ],
    "description": "Compares the types of two variables in Rust."
  },
  "Rust Type Conversion": {
    "prefix": ["cotrTypeConvert", "cotrTypeCast", "cotrConvert", "cotrCast"],
    "body": [
      "// Rust Type Conversion:",
      "",
      "// Rust emphasizes explicit type conversions for safety.",
      "",
      "// Explicit conversions:",
      "// - variable as TargetType  // Type casting (can panic if conversion fails)",
      "// - TargetType::from(variable)  // Conversion methods (e.g., i32::from(f64))",
      "",
      "// Note:",
      "// - Be cautious with type casting, as it can lead to panics if the conversion is not valid."
    ],
    "description": "Explains type conversion in Rust."
  },
  "Rust Types": {
    "prefix": [
      "cotrTypes",
      "types",
      "allTypes",
      "languageTypes",
      "builtInTypes",
      "dataTypes"
    ],
    "body": [
      "$BLOCK_COMMENT_START",
      "Rust is a statically typed language.",
      "",
      "Types in Rust include:",
      "- i8, i16, i32, i64, i128: Signed integers",
      "- u8, u16, u32, u64, u128: Unsigned integers",
      "- f32, f64: Floating-point numbers",
      "- bool: Boolean",
      "- char: Character",
      "- str: String slice",
      "- String: Heap-allocated string",
      "- &[T]: Slice of type T",
      "- Vec<T>: Vector of type T",
      "- Option<T>: Optional value of type T",
      "- Result<T, E>: Result of a computation that could be successful (T) or an error (E)",
      "- Box<T>: Boxed (heap-allocated) type T",
      "- Rc<T>: Reference-counted type T",
      "- RefCell<T>: Mutable memory location with dynamically checked borrow rules",
      "- HashMap<K, V>: Hash map with key type K and value type V",
      "- Tuple (T1, T2, ...): Tuple with elements of different types",
      "- Array [T; N]: Array with elements of type T and fixed size N",
      "- Struct: Custom data type with named fields",
      "- Enum: Custom data type with variants",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Lists the types in Rust."
  },
  "Rust String Type (String)": {
    "prefix": [
      "cotrTypesString",
      "stringType",
      "typeString",
      "textType",
      "typeText"
    ],
    "body": ["String"],
    "description": "The Rust String type."
  },
  "Rust String Type (&str)": {
    "prefix": "cotrTypesStringAlt",
    "body": ["&str"],
    "description": "The Rust &str type."
  },
  "Rust Integer Type (i32)": {
    "prefix": ["cotrTypesInt", "intType", "typeInt"],
    "body": ["i32"],
    "description": "The Rust i32 type."
  },
  "Rust Integer Type (i64)": {
    "prefix": "cotrTypesIntAlt",
    "body": ["i64"],
    "description": "The Rust i64 type."
  },
  "Rust Float Type (f32)": {
    "prefix": [
      "cotrTypesNum",
      "numberType",
      "typeNumber",
      "doubleType",
      "typeDouble"
    ],
    "body": ["f32"],
    "description": "The Rust f32 type."
  },
  "Rust Float Type (f64)": {
    "prefix": ["cotrTypesNumAlt", "floatType", "typeFloat"],
    "body": ["f64"],
    "description": "The Rust f64 type."
  },
  "Rust Boolean Type (bool)": {
    "prefix": ["cotrTypesBool", "booleanType", "typeBool"],
    "body": ["bool"],
    "description": "The Rust bool type."
  },
  "Rust Boolean True": {
    "prefix": ["cotrTypesBoolTrue", "true", "booleanTrue", "on"],
    "body": ["true"],
    "description": "The Rust true value."
  },
  "Rust Boolean False": {
    "prefix": ["cotrTypesBoolFalse", "false", "off", "booleanFalse"],
    "body": ["false"],
    "description": "The Rust false value."
  },
  "Rust Date Type": {
    "prefix": [
      "cotrTypesDate",
      "dateType",
      "typeDate",
      "timeType",
      "timestampType",
      "dateTimeType"
    ],
    "body": [
      "// Rust does not have a built-in Date type.",
      "// Use the chrono crate for date and time operations.",
      "use chrono::{DateTime, Utc};"
    ],
    "description": "Explains the absence of a built-in Date type in Rust."
  },
  "Rust Map Type": {
    "prefix": [
      "cotrTypesMap",
      "mapType",
      "typeMap",
      "hashmapType",
      "structType",
      "dictType",
      "typeDict",
      "typeScruct"
    ],
    "body": ["std::collections::HashMap<${1:KeyType}, ${2:ValueType}>"],
    "description": "The Rust HashMap type, equivalent to a map."
  },
  "Rust List Type": {
    "prefix": ["cotrTypesList", "listType", "typeList", "typeArray"],
    "body": ["Vec<${1:Type}>"],
    "description": "The Rust Vec type, commonly used as a list."
  },
  "Rust Date Now": {
    "prefix": ["cotrNow", "now", "currentTime", "dateNow"],
    "body": [
      "// Rust does not have a built-in Date type.",
      "// Use the chrono crate to get the current date and time.",
      "use chrono::Utc;",
      "",
      "Utc::now()"
    ],
    "description": "Gets the current date and time in Rust using the chrono crate."
  },
  "Rust Character Type": {
    "prefix": ["cotrTypesChar"],
    "body": ["char"],
    "description": "The Rust char type."
  },
  "Rust Null Type (Option)": {
    "prefix": ["cotrNull", "null", "nil", "none", "nothing", "option"],
    "body": ["None"],
    "description": "The Rust Option type."
  },
  "Rust Dynamic Type (Any)": {
    "prefix": "cotrAny",
    "body": ["dyn Any // There is no built-in Any type in Rust."],
    "description": "The Rust dyn Any type."
  },
  "Rust Interpolate String": {
    "prefix": [
      "cotrInterpolate",
      "interpolate",
      "variableExpansion",
      "variableSubstitution",
      "stringPlaceholders",
      "stringInterpolation"
    ],
    "body": ["format!(\"${1:Your message here}\")"],
    "description": "Interpolates a string in Rust."
  },
  "Rust Concatenate String": {
    "prefix": ["cotrConcat", "concatenate", "combine"],
    "body": ["format!(\"${1:Your message here} ${2:and} ${3:more}\")"],
    "description": "Concatenates strings in Rust."
  },
  "Rust Create Variable": {
    "prefix": ["cotrVar", "variable", "createVariable", "newVariable"],
    "body": ["let ${1:myVar} = $2;"],
    "description": "Creates a variable in Rust using the let keyword."
  },
  "Variable Declaration Syntax": {
    "prefix": [
      "cotrVarSyntax",
      "variableSyntax",
      "howToVariables",
      "letSyntax"
    ],
    "body": [
      "// Rust Variable Declaration Syntax:",
      "",
      "// - let: (Scope: Block)",
      "//   - Declares an immutable variable by default.",
      "//   - Use for values that should not change.",
      "",
      "// - let mut: (Scope: Block)",
      "//   - Declares a mutable variable.",
      "//   - Use for variables that need to be reassigned.",
      "",
      "// - const: (Scope: Global)",
      "//   - Declares a constant value.",
      "//   - Must be initialized with a constant expression.",
      "",
      "// Note:",
      "// - Rust does not have a direct equivalent to 'var'.",
      "// - Use 'let' for most variable declarations.",
      "// - Use 'let mut' for variables that need to be reassigned.",
      "// - Use 'const' for values that are known at compile time."
    ],
    "description": "Explains Rust variable declaration syntax"
  },
  "Rust Create Typed Variable": {
    "prefix": ["cotrVarTyped", "typedVariable", "variableWithType"],
    "body": ["let ${1:my_var}: ${2:Type} = $3;"],
    "description": "Creates a typed variable in Rust."
  },
  "Rust Create Nullable Variable": {
    "prefix": ["cotrVarNullable", "variableNullable", "nullableVariable"],
    "body": ["let ${1:my_var}: Option<${2:Type}> = $3;"],
    "description": "Creates a nullable variable in Rust using the Option type."
  },
  "Rust Create String Variable": {
    "prefix": [
      "cotrVarString",
      "string",
      "stringVariable",
      "variableString",
      "text",
      "createString",
      "createText"
    ],
    "body": ["let ${1:myStr} = String::from(${2:\"myString\"});"],
    "description": "Creates a string variable in Rust using the String class."
  },
  "Rust Create Multi-line String Variable": {
    "prefix": [
      "cotrVarStringMulti",
      "multiLineString",
      "varStringMulti",
      "stringVariableMulti",
      "createMultiLineString"
    ],
    "body": [
      "let ${1:myStr} = String::from(",
      "  ${2:'Line 1'}",
      "  ${3:'Line 2'}",
      "  ${4:'Line 3'}",
      ");"
    ],
    "description": "Creates a multi-line string variable in Rust using the String class."
  },
  " Rust Create Integer Variable": {
    "prefix": [
      "cotrVarInt",
      "integer",
      "int",
      "variableInt",
      "intVariable",
      "createInt"
    ],
    "body": ["let ${1:myInt} = ${2:0};"],
    "description": "Creates an integer variable in Rust."
  },
  "Rust Create Float Variable": {
    "prefix": ["cotrVarNum", "number",  "float", "floatVariable", "variableFloat", "variableNumber", "numberVariable"],
    "body": ["let ${1:myFloat} = ${2:0.0};"],
    "description": "Creates a float variable in Rust."
  },
  "Rust Create Boolean Variable": {
    "prefix": [
      "cotrVarBool",
      "variableBool",
      "bool",
      "boolVariable",
      "createBool"
    ],
    "body": ["let ${1:myBool} = ${2:true};"],
    "description": "Creates a boolean variable in Rust."
  },
  "Rust Create Date Variable": {
    "prefix": ["cotrVarDate", "dateVariable", "variableDate", "date"],
    "body": [
      "// Rust does not have a built-in Date type.",
      "// Use the chrono crate to create a date variable.",
      "use chrono::{DateTime, Utc};",
      "",
      "let ${1:my_date}: DateTime<Utc> = Utc::now();"
    ],
    "description": "Creates a date variable in Rust using the chrono crate."
  },
  "Rust Create List Variable": {
    "prefix": [
      "cotrVarList",
      "createList",
      "listVariable",
      "arrayVariable",
      "variableList",
      "variableArray",
      "list",
      "array"
    ],
    "body": [
      "let ${1:myList} = [",
      "  ${2:'item1'},",
      "  ${3:'item2'},",
      "  // Add more items here",
      "];"
    ],
    "description": "Creates a list variable in Rust."
  },
  "Rust Create Map Variable (Hashmap)": {
    "prefix": [
      "cotrVarMap",
      "createMap",
      "createStruct",
      "variableMap",
      "variableStruct",
      "mapVariable",
      "structVariable",
      "dictVariable",
      "variableDict",
      "createDict"
    ],
    "body": [
      "use std::collections::HashMap;",
      "",
      "let ${1:myMap} = HashMap::new();"
    ],
    "description": "Creates a map variable in Rust using the HashMap class."
  },
  "Rust Create Map Variable (BTreeMap)": {
    "prefix": "cotrVarMapAlt",
    "body": [
      "use std::collections::BTreeMap;",
      "",
      "let ${1:myMap} = BTreeMap::new();"
    ],
    "description": "Creates a map variable in Rust using the BTreeMap class."
  },
  "Rust Create Constant": {
    "prefix": ["cotrConst", "constant"],
    "body": ["const ${1:myConst}: ${2:type} = $3;"],
    "description": "Creates a constant variable in Rust using the const keyword."
  },
  "Rust Create Mutable Variable": {
    "prefix": "cotrMutVar",
    "body": ["let mut ${1:myVar} = $2;"],
    "description": "Creates a mutable variable in Rust using the let mut keywords."
  },
  "Rust Generate Object Map": {
    "prefix": ["cotrGenMap", "generateMap"],
    "body": [
      "let ${1:myMap} = [",
      "  ${2:'key1'}: ${3:'value1'},",
      "  ${4:'key2'}: ${5:'value2'},",
      "  // Add more key-value pairs here",
      "];"
    ],
    "description": "Generates an object map with a specific number of key-value pairs in Rust."
  },
  "Rust Generate Array": {
    "prefix": ["cotrGenList", "generateList", "listGen"],
    "body": [
      "let ${1:myList} = [",
      "  ${2:'item1'},",
      "  ${3:'item2'},",
      "  // Add more items here",
      "];"
    ],
    "description": "Generates an array (list) of a specific length in Rust."
  },
  "Rust Print": {
    "prefix": ["cotrPrint", "print", "log", "systemOut", "write", "consoleLog"],
    "body": ["println!(\"{${1:'Your message here'}}\");"],
    "description": "Prints a message to the console in Rust."
  },
  "Rust Print Multi": {
    "prefix": ["cotrPrintMulti", "printMultiLine"],
    "body": [
      "println!(\"{}",
      "{}",
      "{}\",",
      "${1:\"Line 1\"},",
      "${2:\"Line 2\"},",
      "${3:\"Line 3\"}",
      ");"
    ],
    "description": "Prints a multi-line message to the console in Rust."
  },
  "Rust For Loop": {
    "prefix": ["cotrForLoop", "forLoop", "forX"],
    "body": ["for ${1:i} in ${2:0..10} {", "  // Your code here", "}"],
    "description": "Creates a for loop that iterates through a set of numbers with the index in Rust."
  },
  "Rust For...Of Loop": {
    "prefix": "cotrForOfLoop",
    "body": ["for ${1:item} in ${2:iterable} {", "  // Your code here", "}"],
    "description": "Iterates over an iterable object in Rust."
  },
  "Rust While Loop": {
    "prefix": ["cotrWhileLoop", "whileLoop", "whileTrue"],
    "body": ["while ${1:condition} {", "  // Your code here", "}"],
    "description": "Creates a while loop in Rust."
  },
  "Rust Match Statement": {
    "prefix": ["cotrSwitch", "switch", "switchStatement", "select", "case"],
    "body": [
      "match ${1:variable} {",
      "  ${2:value1} => {",
      "    // Your code here",
      "  },",
      "  ${3:value2} => {",
      "    // Your code here",
      "  },",
      "  _ => {",
      "    // Your code here",
      "  }",
      "}"
    ],
    "description": "Creates a match statement in Rust."
  },
  "Rust Function": {
    "prefix": [
      "cotrFunc",
      "function",
      "subprogram",
      "procedure",
      "subroutine",
      "method"
    ],
    "body": [
      "fn ${2:my_function}(${3:parameters}) -> ${1:void} {",
      "    ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a function in Rust."
  },
  "Rust Function Args": {
    "prefix": ["cotrFuncArgs", "functionArgs", "functionWithArgs"],
    "body": [
      "// In Rust, default arguments are not supported but you can set default values using patterns like Option<T> or custom types.",
      "fn ${2:my_function}(${3:arg1}: ${4:type1}, ${5:arg2}: Option<${6:type2}> = None) -> ${1:void} {",
      "    ${7:// Your code here}",
      "}"
    ],
    "description": "Creates a function with arguments in Rust, including an argument with an optional default value."
  },
  "Rust Function Named Args": {
    "prefix": ["cotrFuncArgsNamed", "functionNamedArgs"],
    "body": [
      "// Note: Rust does not support named arguments in function definitions."
    ],
    "description": "Note about named arguments in Rust."
  },
  "Rust Closure": {
    "prefix": ["cotrClosure", "cotrFuncArrow", "cotrFuncLambda", "cotrLambda"],
    "body": ["let ${1:my_closure} = |${2:parameters}| ${3:expression};"],
    "description": "Creates a closure (lambda function) in Rust."
  },
  "Rust Anonymous Function": {
    "prefix": [
      "cotrFuncAnon",
      "anonFunc",
      "anonymous",
      "closure",
      "lambda",
      "functionLiteral",
      "cotrFuncLambda"
    ],
    "body": [
      "|${1:parameters}| -> ${2:ReturnType} {",
      "    ${3:// Your code here}",
      "}"
    ],
    "description": "Creates an anonymous closure in Rust."
  },
  "Rust Function Syntax": {
    "prefix": ["cotrFuncSyntax", "functionSyntax", "functionDocs"],
    "body": [
      "// Rust Function Syntax",
      "// Basic function: fn function_name(parameters) -> return_type { ... }",
      "// Function with arguments: fn function_name(arg1: type1, arg2: type2, ...) -> return_type { ... }",
      "// Note: Rust does not support named arguments in function definitions."
    ],
    "description": "Outlines the syntax for functions in Rust."
  },
  "Rust Comment": {
    "prefix": ["cotrComment", "comment", "note"],
    "body": ["// ${1:comment}"],
    "description": "Creates a single line comment in Rust."
  },
  "Rust Multi-line Comment": {
    "prefix": [
      "cotrCommentMulti",
      "multiLineComment",
      "commentMultiLine",
      "blockComment"
    ],
    "body": ["/*", " * ${1:comment}", " */"],
    "description": "Creates a multi-line comment in Rust."
  },
  "Rust Throw Exception": {
    "prefix": ["cotrThrow", "throwError", "throwException"],
    "body": ["panic!(\"Your message here\")"],
    "description": "Throws an exception in Rust."
  },
  "Rust Try Catch": {
    "prefix": ["cotrTryCatch", "tryCatch"],
    "body": [
      "let result = std::panic::catch_unwind(|| {",
      "  ${1:// Your code here}",
      "});",
      "if let Err(err) = result {",
      "  ${2:// Your code here}",
      "}"
    ],
    "description": "Creates a try...catch block in Rust."
  },
  "Rust Enum": {
    "prefix": ["cotrEnum", "enum"],
    "body": [
      "enum ${1:MyEnum} {",
      "  ${2:Variant1},",
      "  ${3:Variant2},",
      "  // Add more variants here",
      "}"
    ],
    "description": "Creates an enum in Rust."
  },
  "Rust Struct": {
    "prefix": ["cotrClass", "class", "objectTemplate"],
    "body": [
      "struct ${1:MyStruct} {",
      "  ${2:field1}: ${3:type1},",
      "  ${4:field2}: ${5:type2},",
      "  // Add more fields here",
      "}"
    ],
    "description": "Creates a struct in Rust."
  },
  "Rust If Statement": {
    "prefix": ["cotrIf", "ifStatement"],
    "body": ["if ${1:condition} {", "  ${2:// Your code here}", "}"],
    "description": "Creates an if statement in Rust."
  },
  "Rust If Else Statement": {
    "prefix": ["cotrIfElse", "ifElseStatement"],
    "body": [
      "if ${1:condition} {",
      "  ${2:// Your code here}",
      "} else if ${3:condition} {",
      "  ${4:// Your code here}",
      "} else {",
      "  ${5:// Your code here}",
      "}"
    ],
    "description": "Creates an if...else statement in Rust."
  },
  "Rust Ternary Operator": {
    "prefix": ["cotrTernary", "ternary", "conditionalOperator"],
    "body": ["${1:condition} ? ${2:trueValue} : ${3:falseValue}"],
    "description": "Creates a ternary operator in Rust."
  }
}
