{
  "TypeScript Types": {
    "prefix": "cotrTypes",
    "body": [
      "$BLOCK_COMMENT_START",
      "TypeScript is a statically typed language.",
      "",
      "Types in TypeScript include:",
      "- number: Numeric data type",
      "- string: Textual data type",
      "- boolean: True or false value",
      "- array: Array of values",
      "- tuple: Fixed-length array of values",
      "- enum: Enumeration of named values",
      "- any: Any data type",
      "- void: Absence of a value",
      "- null: Null value",
      "- undefined: Undefined value",
      "- never: Represents values that never occur",
      "- object: Non-primitive data type",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Prints out all the basic types in TypeScript."
  },  
  "TypeScript String Type": {
    "prefix": "cotrString",
    "body": ["string"],
    "description": "The TypeScript string type."
  },
  "TypeScript Number Type": {
    "prefix": "cotrNum",
    "body": ["number"],
    "description": "The TypeScript number type."
  },
  "TypeScript Boolean Type": {
    "prefix": "cotrBool",
    "body": ["boolean"],
    "description": "The TypeScript boolean type."
  },
  "TypeScript Boolean True": {
    "prefix": "cotrBoolTrue",
    "body": ["true"],
    "description": "The TypeScript true value."
  },
  "TypeScript Boolean False": {
    "prefix": "cotrBoolFalse",
    "body": ["false"],
    "description": "The TypeScript false value."
  },
  "TypeScript Date Type": {
    "prefix": "cotrDate",
    "body": ["Date"],
    "description": "The TypeScript Date object."
  },
  "TypeScript Date Now": {
    "prefix": "cotrNow",
    "body": ["new Date()"],
    "description": "Gets the current date and time in TypeScript."
  },
  "TypeScript Null Type": {
    "prefix": "cotrNull",
    "body": ["null"],
    "description": "The TypeScript null type."
  },
  "TypeScript Interpolate String": {
    "prefix": "cotrInterpolate",
    "body": ["`Hello, ${1:name}!`"],
    "description": "Interpolates a string in TypeScript."
  },
  "TypeScript Create Variable": {
    "prefix": "cotrVar",
    "body": ["let ${1:myVar} = $2;"],
    "description": "Creates a variable in TypeScript using the let keyword."
  },
  "TypeScript Create Typed Variable": {
	"prefix": "cotrVarTyped",
	"body": ["let ${1:myVar}: ${2:Type} = $3;"],
	"description": "Creates a typed variable in TypeScript."
  },  
  "TypeScript Create Nullable Variable": {
	"prefix": "cotrVarNullable",
	"body": ["let ${1:myVar}: ${2:Type} | null = $3;"],
	"description": "Creates a nullable variable in TypeScript."
  },  
  "TypeScript Create String Variable": {
    "prefix": "cotrVarString",
    "body": ["let ${1:myString}: string = ${2:'myValue'};"],
    "description": "Creates a string variable in TypeScript."
  },
  "TypeScript Create Number Variable": {
    "prefix": "cotrVarNumber",
    "body": ["let ${1:myNumber}: number = ${2:0};"],
    "description": "Creates a number variable in TypeScript."
  },
  "TypeScript Create Boolean Variable": {
    "prefix": "cotrVarBool",
    "body": ["let ${1:myBoolean}: boolean = ${2:true};"],
    "description": "Creates a boolean variable in TypeScript."
  },
  "TypeScript Create Date Variable": {
    "prefix": "cotrVarDate",
    "body": [
      "let ${1:myDate}: Date = new Date(${2:year}, ${3:month} - 1, ${4:day});"
    ],
    "description": "Creates a date variable in TypeScript."
  },
  "TypeScript Create List Variable": {
    "prefix": "cotrVarList",
    "body": ["let ${1:myList}: ${2:type}[] = [${3:'item1'}, ${4:'item2'}];"],
    "description": "Creates an array (list) variable in TypeScript."
  },
  "TypeScript Create Map Variable": {
    "prefix": "cotrVarMap",
    "body": [
      "let ${1:myMap}: { [key: string]: ${2:type} } = {",
      "  ${3:'key1'}: ${4:'value1'},",
      "  ${5:'key2'}: ${6:'value2'},",
      "  // Add more key-value pairs here",
      "};"
    ],
    "description": "Creates a map variable in TypeScript."
  },
  "TypeScript Create Constant": {
    "prefix": "cotrConst",
    "body": ["const ${1:myConst} = $2;"],
    "description": "Creates a constant variable in TypeScript using the const keyword."
  },
  "TypeScript Static Variable": {
    "prefix": "cotrStaticVar",
    "body": [
      "static ${3:myStaticVar}: ${2:type} = ${4:value};",
      "",
      "// Access the static variable",
      "// MyClass.${3:myStaticVar}"
    ],
    "description": "Creates a static variable in a TypeScript class."
  },
  "TypeScript Create Map (Object)": {
    "prefix": "cotrMap",
    "body": [
      "const ${1:myMap} = {",
      "  ${2:'key1'}: ${3:'value1'},",
      "  ${4:'key2'}: ${5:'value2'},",
      "  // Add more key-value pairs here",
      "};"
    ],
    "description": "Creates a map using an object in TypeScript."
  },
  "TypeScript Create Map (Map Class)": {
    "prefix": "cotrMapAlt",
    "body": [
      "const ${1:myMap} = new Map([",
      "  [${2:'key1'}, ${3:'value1'}],",
      "  [${4:'key2'}, ${5:'value2'}],",
      "  // Add more key-value pairs here",
      "]);"
    ],
    "description": "Creates a map using the Map class in TypeScript."
  },
  "TypeScript Generate Object Map": {
    "prefix": "cotrGenMap",
    "body": [
      "const ${1:myMap} = Object.fromEntries(",
      "  Array.from({ length: ${2:length} }, (_, index) => [`key${index}`, `value${index}`])",
      ");"
    ],
    "description": "Generates an object map with a specific number of key-value pairs in TypeScript."
  },
  "TypeScript Create Array": {
    "prefix": "cotrList",
    "body": [
      "const ${1:myList} = [",
      "  ${2:'item1'},",
      "  ${3:'item2'},",
      "  // Add more items here",
      "];"
    ],
    "description": "Creates an array (list) in TypeScript."
  },
  "TypeScript Generate Array": {
    "prefix": "cotrGenList",
    "body": [
      "const ${1:myList} = Array.from({ length: ${2:length} }, (_, index) => ${3:'item'} + index);"
    ],
    "description": "Generates an array (list) of a specific length in TypeScript."
  },
  "TypeScript Print": {
    "prefix": "cotrPrint",
    "body": ["console.log(${1:'Your message here'});"],
    "description": "Prints a message to the console in TypeScript."
  },
  "TypeScript Print Multi": {
    "prefix": "cotrPrintMulti",
    "body": [
      "console.log(`",
      "${1:Line 1}",
      "${2:Line 2}",
      "${3:Line 3}",
      "`);"
    ],
    "description": "Prints a multi-line message to the console in TypeScript."
  },  
  "TypeScript For Loop": {
    "prefix": "cotrForLoop",
    "body": [
      "for (let ${1:i} = 0; $1 < ${2:10}; $1++) {",
      "  // Your code here",
      "}"
    ],
    "description": "Creates a for loop that iterates through a set of numbers with the index in TypeScript."
  },
  "TypeScript For...Of Loop": {
    "prefix": "cotrForOfLoop",
    "body": [
      "for (const item of ${1:iterable}) {",
      "  ${2:// Your code here}",
      "}"
    ],
    "description": "Iterates over an iterable object in TypeScript."
  },
  "TypeScript While Loop": {
    "prefix": "cotrWhileLoop",
    "body": ["while (${1:condition}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates a while loop in TypeScript."
  },
  "TypeScript Switch Statement": {
    "prefix": "cotrSwitch",
    "body": [
      "switch (${1:variable}) {",
      "  case ${2:value1}:",
      "    ${3:// Your code here}",
      "    break;",
      "  case ${4:value2}:",
      "    ${5:// Your code here}",
      "    break;",
      "  default:",
      "    ${6:// Your code here}",
      "}"
    ],
    "description": "Creates a switch statement in TypeScript."
  },
  "TypeScript Function": {
    "prefix": "cotrFunc",
    "body": [
      "function ${2:myFunction}(${3:parameters}): ${1:void} {",
      "  ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a function in TypeScript."
  },
  "TypeScript Comment": {
    "prefix": "cotrComment",
    "body": ["// ${1:Your comment here}"],
    "description": "Creates a single-line comment in TypeScript."
  },
  "TypeScript Multi-Line Comment": {
    "prefix": "cotrCommentMulti",
    "body": ["/*", " * ${1:Your comment here}", " */"],
    "description": "Creates a multi-line comment in TypeScript."
  },
  "TypeScript Throw Exception": {
    "prefix": "cotrThrow",
    "body": ["throw new Error('Your message here');"],
    "description": "Throws an exception in TypeScript."
  },
  "TypeScript Try Catch": {
    "prefix": "cotrTryCatch",
    "body": [
      "try {",
      "  ${1:// Your code here}",
      "} catch (${2:exception}) {",
      "  ${3:// Your code here}",
      "}"
    ],
    "description": "Creates a try...catch block in TypeScript."
  },
  "TypeScript Enum": {
    "prefix": "cotrEnum",
    "body": [
      "enum ${1:MyEnum} {",
      "  ${2:value1},",
      "  ${3:value2},",
      "  // Add more values here",
      "}"
    ],
    "description": "Creates an enum in TypeScript."
  },
  "TypeScript Class": {
    "prefix": "cotrClass",
    "body": ["class ${1:MyClass} {", "  ${2:// Your code here}", "}"],
    "description": "Creates a class in TypeScript."
  },
  "TypeScript If Statement": {
    "prefix": "cotrIf",
    "body": ["if (${1:condition}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates an if statement in TypeScript."
  },
  "TypeScript If Else Statement": {
    "prefix": "cotrIfElse",
    "body": [
      "if (${1:condition}) {",
      "  ${2:// Your code here}",
      "} else if (${3:condition}) {",
      "  ${4:// Your code here}",
      "} else {",
      "  ${5:// Your code here}",
      "}"
    ],
    "description": "Creates an if...else statement in TypeScript."
  },
  "TypeScript Ternary Operator": {
    "prefix": "cotrTernary",
    "body": ["${1:condition} ? ${2:trueValue} : ${3:falseValue}"],
    "description": "Creates a ternary operator in TypeScript."
  },
  "TypeScript Lambda": {
    "prefix": "cotrLambda",
    "body": ["const ${1:myLambda} = (${2:parameters}) => ${3:expression};"],
    "description": "Creates a lambda function in TypeScript."
  }
}
