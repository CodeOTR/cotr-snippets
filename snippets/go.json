{
  "Go Info": {
    "prefix": ["cotrInfo", "languageInfo", "info"],
    "body": [
      "Typing: Statically typed",
      "Paradigm: Multi-paradigm: procedural, concurrent",
      "Compilation: Compiled",
      "Concurrency: Built-in support for concurrency with goroutines and channels"
    ],
    "description": "Provides general information about the Go programming language."
  },
  "Go Entry Point": {
    "prefix": ["cotrEntry", "entry", "start", "startingPoint"],
    "body": [
      "// Go Entry Point",
      "// To run this program, use: `go run filename.go`",
      "",
      "package main",
      "",
      "import \"fmt\"",
      "",
      "func main() {",
      "    fmt.Println(\"Hello, World!\")",
      "}"
    ],
    "description": "Creates the entry point of a Go application."
  },
  "Go Mathematical Operators": {
    "prefix": ["cotrOperators", "operators", "mathDocs"],
    "body": [
      "// Go Mathematical Operators:",
      "// Addition: +",
      "// Subtraction: -",
      "// Multiplication: *",
      "// Exponentiation: **",
      "// Division: /",
      "// Modulus: %",
      "// Increment: ++",
      "// Decrement: --",
      "// Assignment: =",
      "// Addition assignment: +=",
      "// Subtraction assignment: -=",
      "// Multiplication assignment: *=",
      "// Division assignment: /=",
      "// Modulus assignment: %="
    ],
    "description": "Lists the mathematical operators in Go."
  },
  "Go Equal To": {
    "prefix": ["cotrEqual", "equal"],
    "body": ["=="],
    "description": "Go equal to operator."
  },
  "Go Not Equal To": {
    "prefix": ["cotrNotEqual", "notEqual", "doesNotEqual"],
    "body": ["!="],
    "description": "Go not equal to operator."
  },
  "Go Boolean Operators": {
    "prefix": ["cotrOperatorsBool", "booleanOperators", "logic"],
    "body": [
      "// Go Boolean Operators:",
      "// Logical AND: &&",
      "// Logical OR: ||",
      "// Logical NOT: !",
      "// Equality: ==",
      "// Inequality: !=",
      "// Greater than: >",
      "// Less than: <",
      "// Greater than or equal to: >=",
      "// Less than or equal to: <="
    ],
    "description": "Lists the boolean operators in Go."
  },
  "Go Type Check": {
    "prefix": ["cotrTypeCheck", "checkType", "getType", "typeOf"],
    "body": ["fmt.Printf(\"%T\", ${1:variable})"],
    "description": "Prints the type of a variable in Go."
  },
  "Go This Type Check": {
    "prefix": ["thisTypeCheck", "thisType", "getThisType"],
    "body": ["reflect.TypeOf($CLIPBOARD).String()"],
    "description": "Gets the type of the variable in the clipboard in Go."
  },  
  "Go Type Comparison": {
    "prefix": ["cotrTypeCompare", "compareTypes"],
    "body": [
      "// Check if two variables have the same type:",
      "if reflect.TypeOf(${1:variable1}) == reflect.TypeOf(${2:variable2}) {",
      "  // Your code here",
      "}"
    ],
    "description": "Compares the types of two variables in Go."
  },
  "Go Type Conversion": {
    "prefix": "cotrTypeConvert",
    "body": [
      "// Go Type Conversion:",
      "",
      "// Explicit conversions (using type assertion):",
      "// - targetType(variable)  // Type assertion (can panic if conversion fails)",
      "",
      "// Conversion functions:",
      "// - strconv.Itoa(int)  // Converts int to string",
      "// - strconv.Atoi(string)  // Converts string to int",
      "// - ... (Various conversion functions in strconv and other packages)",
      "",
      "// Note:",
      "// - Be cautious with type assertions, as they can lead to panics if the conversion is not valid."
    ],
    "description": "Explains type conversion in Go."
  },
  "Go Types": {
    "prefix": ["cotrTypes", "types", "allTypes", "languageTypes", "builtInTypes", "dataTypes"],
    "body": [
      "$BLOCK_COMMENT_START",
      "Go is a statically typed language.",
      "",
      "Types in Go include:",
      "- int, int8, int16, int32, int64: Signed integers",
      "- uint, uint8, uint16, uint32, uint64: Unsigned integers",
      "- float32, float64: Floating-point numbers",
      "- complex64, complex128: Complex numbers",
      "- byte: Alias for uint8",
      "- rune: Alias for int32 (represents a Unicode code point)",
      "- string: String",
      "- bool: Boolean",
      "- [10]int: Array of integers with fixed size 10",
      "- []int: Slice of integers",
      "- map[K]V: Map with key type K and value type V",
      "- struct { Field1 int; Field2 string; }: Custom data structure with named fields",
      "- interface{}: Interface type representing any type",
      "- chan int: Channel for sending and receiving integers",
      "- func(int) string: Function type taking an int and returning a string",
      "- error: Interface type for error handling",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Lists the types in Go."
  },
  "Go String Type": {
    "prefix": ["cotrTypesString", "stringType", "typeString", "textType", "typeText"],
    "body": ["string"],
    "description": "The Go string type."
  },
  "Go Integer Type": {
    "prefix": ["cotrTypesInt", "intType", "typeInt"],
    "body": ["int"],
    "description": "The Go int type."
  },
  "Go Float Type": {
    "prefix": ["cotrTypesNum", "numberType", "typeNumber", "doubleType", "typeDouble"],
    "body": ["float64"],
    "description": "The Go float64 type."
  },
  "Go Boolean Type": {
    "prefix": ["cotrTypesBool", "booleanType", "typeBool"],
    "body": ["bool"],
    "description": "The Go bool type."
  },
  "Go Boolean True": {
    "prefix": ["cotrTypesBoolTrue", "true", "booleanTrue", "on"],
    "body": ["true"],
    "description": "The Go true boolean value."
  },
  "Go Boolean False": {
    "prefix": ["cotrTypesBoolFalse", "false", "off", "booleanFalse"],
    "body": ["false"],
    "description": "The Go false boolean value."
  },
  "Go Date Type": {
    "prefix": ["cotrTypesDate", "dateType", "typeDate", "timeType", "timestampType", "dateTimeType"],
    "body": ["time.Time"],
    "description": "The Go time.Time type."
  },
  "Go Map Type": {
    "prefix": ["cotrTypesMap", "mapType", "typeMap", "hashmapType", "structType", "dictType", "typeDict", "typeScruct"],
    "body": ["map[${1:keyType}]${2:valueType}"],
    "description": "The Go map type."
  },
  "Go List Type": {
    "prefix": ["cotrTypesList", "listType", "typeList", "typeArray"],
    "body": ["[]${1:type}"],
    "description": "The Go slice type, commonly used as a list."
  },
  "Go Null Type": {
    "prefix": "cotrTypesNull",
    "body": ["nil"],
    "description": "The Go nil value, representing the absence of a value."
  },
  "Go Dynamic Type": {
    "prefix": "cotrTypesDynamic",
    "body": ["interface{}"],
    "description": "The Go interface{} type, representing any type."
  },
  "Go Date Now": {
    "prefix": "cotrTypesDateNow",
    "body": ["time.Now()"],
    "description": "The Go time.Now() function."
  },
  "Go Interpolate String": {
    "prefix": ["cotrInterpolate", "interpolate", "variableExpansion", "variableSubstitution", "stringPlaceholders", "stringInterpolation"],
    "body": ["`${1:string}`"],
    "description": "Interpolates a string in Go."
  },
  "Go Concatenate Strings": {
    "prefix": ["cotrConcat", "concatenate", "combine"],
    "body": ["${1:string1} + ${2:string2}"],
    "description": "Concatenates two strings in Go."
  },
  "Go Create Variable": {
    "prefix": ["cotrVar", "variable", "createVariable", "newVariable"],
    "body": ["var ${1:variableName} ${2:variableType} = ${3:variableValue}"],
    "description": "Creates a variable in Go using the var keyword"
  },
  "Go Variable Declaration Syntax": {
    "prefix": ["cotrVarSyntax", "variableSyntax", "howToVariables", "letSyntax"],
    "body": [
      "// Go Variable Declaration Syntax:",
      "",
      "// - var: (Scope: Block or Package)",
      "//   - Explicitly declare the variable's type.",
      "//   - Can be declared without initialization (zero value is assigned).",
      "",
      "// - :=: (Scope: Block)",
      "//   - Short variable declaration and type inference.",
      "//   - Requires initialization.",
      "",
      "// - const: (Scope: Package)",
      "//   - Cannot be reassigned or redeclared.",
      "//   - Use for values that should remain constant.",
      "",
      "// Note:",
      "// - Use 'var' for package-level variables or when explicit type declaration is desired.",
      "// - Use ':=' for most variable declarations within blocks.",
      "// - Use 'const' for values that are known at compile time."
    ],
    "description": "Explains Go variable declaration syntax"
  },
  "Go Project Structure (High-Level)": {
    "prefix": ["cotrStructure", "structure", "architecture"],
    "body": [
      "// Recommended High-Level Go Project Structure:",
      "",
      "// - cmd/",
      "//   - Contains the main applications for the project.",
      "//   - Each application has its own subdirectory.",
      "//   - For example, if your project has two main applications, 'webserver' and 'datasync',",
      "//     you might have cmd/webserver/ and cmd/datasync/ directories.",
      "",
      "// - pkg/",
      "//   - Contains library code that's ok to use by external applications.",
      "//   - Other projects will import these libraries.",
      "",
      "// - internal/",
      "//   - Contains private application and library code.",
      "//   - The code here is not intended to be used by other applications.",
      "",
      "// - api/",
      "//   - Contains the API definitions for the project.",
      "//   - For example, OpenAPI/Swagger specs, Protocol Buffers files.",
      "",
      "// - web/",
      "//   - Contains web application specific components: static files, templates, etc.",
      "",
      "// - scripts/",
      "//   - Contains scripts that perform various build, install, analysis, etc operations.",
      "",
      "// - configs/",
      "//   - Contains configuration files.",
      "",
      "// - deployments/",
      "//   - Contains configuration and scripts for deploying the application.",
      "",
      "// - test/",
      "//   - Contains additional external test apps and test data.",
      "//   - It might also include test utilities.",
      "",
      "// Note:",
      "// - This structure is particularly common in larger projects or projects that produce",
      "//   multiple executables.",
      "// - Smaller projects might have a simpler structure."
    ],
    "description": "Explains a high-level project structure for Go."
  },
  "Go Create Typed Variable": {
    "prefix": ["cotrVarTyped", "typedVariable", "variableWithType"],
    "body": ["var ${1:myVar} ${2:Type} = $3"],
    "description": "Creates a typed variable in Go."
  },
  "Go Create Nullable Variable": {
    "prefix": ["cotrVarNullable", "variableNullable", "nullableVariable"],
    "body": ["var ${1:myVar} *${2:Type} = $3"],
    "description": "Creates a nullable variable in Go using pointers."
  },
  "Go Create String Variable": {
    "prefix": ["cotrVarString", "string", "stringVariable", "variableString", "text", "createString", "createText"],
    "body": ["var ${1:variableName} string = ${2:variableValue}"],
    "description": "Creates a string variable in Go using the var keyword"
  },
  "Go Create Multi-line String Variable": {
    "prefix": "cotrVarMultiString",
    "body": [
      "var ${1:variableName} = `",
      "${2:Line 1}",
      "${3:Line 2}",
      "${4:Line 3}",
      "`"
    ],
    "description": "Creates a multi-line string variable in Go using the var keyword"
  },
  "Go Create Integer Variable": {
    "prefix": ["cotrVarInt", "integer", "int", "variableInt", "intVariable", "createInt"],
    "body": ["var ${1:variableName} int = ${2:variableValue}"],
    "description": "Creates an integer variable in Go using the var keyword"
  },
  "Go Create Float Variable": {
    "prefix": ["cotrVarNum", "number", "variableNumber", "numberVariable"],
    "body": ["var ${1:variableName} float64 = ${2:variableValue}"],
    "description": "Creates a float variable in Go using the var keyword"
  },
  "Go Create Boolean Variable": {
    "prefix": ["cotrVarBool", "variableBool", "bool", "boolVariable", "createBool"],
    "body": ["var ${1:variableName} bool = ${2:variableValue}"],
    "description": "Creates a boolean variable in Go using the var keyword"
  },
  "Go Create Date Variable": {
    "prefix": ["cotrVarDate", "dateVariable", "variableDate", "date"],
    "body": [
      "// import \"time\"",
      "var ${1:myDate} = time.Date(${2:year}, time.${3:Month}, ${4:day}, ${5:0}, ${6:0}, ${7:0}, ${8:0}, time.UTC)"
    ],
    "description": "Creates a date variable in Go."
  },
  "Go Create List Variable": {
    "prefix": ["cotrVarList", "createList", "listVariable", "arrayVariable", "variableList", "variableArray", "list", "array"],
    "body": [
      "var ${1:variableName} = []${2:variableType}{",
      "    ${3:value1},",
      "    ${4:value2}",
      "}"
    ],
    "description": "Creates a list variable in Go using the var keyword"
  },
  "Go Create Map Variable": {
    "prefix": ["cotrVarMap", "createMap", "createStruct", "variableMap", "variableStruct", "mapVariable", "structVariable", "dictVariable", "variableDict", "createDict"],
    "body": [
      "var ${1:mapName} = map[${2:keyType}]${3:valueType}{",
      "    ${4:key1}: ${5:value1},",
      "    ${6:key2}: ${7:value2}",
      "}"
    ],
    "description": "Creates a map variable in Go using the var keyword"
  },
  "Go Create Constant": {
    "prefix": ["cotrConst", "constant"],
    "body": ["const ${1:variableName} ${2:variableType} = ${3:variableValue}"],
    "description": "Creates a constant variable in Go using the const keyword"
  },
  "Go Generate Map": {
    "prefix": ["cotrGenMap", "generateMap"],
    "body": [
      "var ${1:mapName} = make(map[${2:keyType}]${3:valueType})",
      "${1:mapName}[${4:key1}] = ${5:value1}",
      "${1:mapName}[${6:key2}] = ${7:value2}"
    ],
    "description": "Generates a map in Go"
  },
  "Go Generate Array": {
    "prefix": ["cotrGenList", "generateList", "listGen"],
    "body": [
      "var ${1:arrayName} = []${2:arrayType}{",
      "    ${3:value1},",
      "    ${4:value2}",
      "}"
    ],
    "description": "Generates an array in Go"
  },
  "Go Print": {
   "prefix": ["cotrPrint", "print", "log", "systemOut", "write"],
    "body": ["fmt.Println(${1:message})"],
    "description": "Prints a message to the console in Go"
  },
  "Go Print Multi": {
    "prefix": ["cotrPrintMulti", "printMultiLine"],
    "body": [
      "fmt.Println(`",
      "${1:Line 1}",
      "${2:Line 2}",
      "${3:Line 3}",
      "`)"
    ],
    "description": "Prints a multi-line message to the console in Go."
  },
  "Go For Loop": {
    "prefix": ["cotrForLoop", "forLoop", "forX"],
    "body": [
      "for ${1:i} := ${2:0}; $1 < ${3:10}; $1++ {",
      "    ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a for loop that iterates through a set of numbers with the index in Go"
  },
  "Go For...Range Loop": {
    "prefix": "cotrForRangeLoop",
    "body": [
      "for ${1:index}, ${2:value} := range ${3:iterable} {",
      "    ${4:// Your code here}",
      "}"
    ],
    "description": "Iterates over an iterable object in Go"
  },
  "Go While Loop": {
    "prefix": ["cotrWhileLoop", "whileLoop", "whileTrue"],
    "body": ["for ${1:condition} {", "    ${2:// Your code here}", "}"],
    "description": "Creates a while loop in Go"
  },
  "Go Switch Statement": {
    "prefix": ["cotrSwitch", "switch", "switchStatement", "select", "case"],
    "body": [
      "switch ${1:variable} {",
      "    case ${2:value1}:",
      "        ${3:// Your code here}",
      "        break",
      "    case ${4:value2}:",
      "        ${5:// Your code here}",
      "        break",
      "    default:",
      "        ${6:// Your code here}",
      "}"
    ],
    "description": "Creates a switch statement in Go"
  },
  "Go Function": {
    "prefix": ["cotrFunc", "function", "subprogram", "procedure", "subroutine", "method"],
    "body": [
      "func ${2:MyFunction}(${3:parameters}) ${1:void} {",
      "    ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a function in Go."
  },
  "Go Function Args": {
    "prefix": ["cotrFuncArgs", "functionArgs", "functionWithArgs"],
    "body": [
      "// In Go, functions do not support default argument values in definitions.",
      "func ${2:MyFunction}(${3:arg1} ${4:type1}, ${5:arg2} ${6:type2}) ${1:void} {",
      "    ${7:// Your code here}",
      "}"
    ],
    "description": "Creates a function with arguments in Go, with a note about default argument values."
  },
  "Go Function Named Args": {
    "prefix": ["cotrFuncArgsNamed", "functionNamedArgs"],
    "body": ["// Go does not support named arguments in function definitions."],
    "description": "Go does not support named arguments in function definitions."
  },
  "Go Anonymous Function": {
    "prefix": ["cotrFuncAnon", "anonFunc", "anonymous", "closure" ,"lambda", "functionLiteral", "cotrFuncLambda", "cotrFuncArrow"],
    "body": [
      "var ${1:myFunc} = func(${2:parameters}) ${3:returnType} {",
      "    ${4:// Your code here}",
      "    return ${5:value}",
      "}",
      "",
      "// Usage",
      "${1:myFunc}(${6:arguments})"
    ],
    "description": "Creates an anonymous function or closure in Go."
  },  
  "Go Function Syntax": {
    "prefix": ["cotrFuncSyntax", "functionSyntax", "functionDocs"],
    "body": [
      "// Go Function Syntax",
      "// Basic function: func FunctionName(parameters) returnType { ... }",
      "// Function with arguments: func FunctionName(arg1 type1, arg2 type2, ...) returnType { ... }",
      "// Note: Go does not support named arguments in function definitions."
    ],
    "description": "Outlines the syntax for functions in Go."
  },
  "Go Comment": {
    "prefix": ["cotrComment", "comment", "note"],
    "body": ["// ${1:comment}"],
    "description": "Creates a single-line comment in Go"
  },
  "Go Multi-line Comment": {
    "prefix": ["cotrCommentMulti", "multiLineComment", "commentMultiLine", "blockComment"],
    "body": ["/*", " * ${1:comment}", " */"],
    "description": "Creates a multi-line comment in Go"
  },
  "Go Throw Exception": {
    "prefix": ["cotrThrow", "throwError", "throwException"],
    "body": ["panic('Your message here')"],
    "description": "Throws an exception in Go."
  },
  "Go Try Catch": {
    "prefix": ["cotrTryCatch", "tryCatch"],
    "body": [
      "defer func() {",
      "  if r := recover(); r != nil {",
      "    ${1:// Your code here}",
      "  }",
      "}()",
      "${2:// Your code here}"
    ],
    "description": "Creates a try...catch block in Go."
  },
  "Go Iota": {
    "prefix": ["cotrEnum", "enum"],
    "body": [
      "const (",
      "  ${1:variable1} = iota",
      "  ${2:variable2}",
      "  ${3:variable3}",
      "  // Add more variables here",
      ")"
    ],
    "description": "Creates an iota in Go."
  },
  "Go Struct": {
    "prefix": ["cotrClass", "class", "objectTemplate"],
    "body": [
      "type ${1:MyStruct} struct {",
      "  ${2:field1} ${3:type1}",
      "  ${4:field2} ${5:type2}",
      "  // Add more fields here",
      "}"
    ],
    "description": "Creates a struct in Go."
  },
  "Go If Statement": {
    "prefix": ["cotrIf", "ifStatement"],
    "body": ["if ${1:condition} {", "  ${2:// Your code here}", "}"],
    "description": "Creates an if statement in Go."
  },
  "Go If Else Statement": {
    "prefix": ["cotrIfElse", "ifElseStatement"],
    "body": [
      "if ${1:condition} {",
      "  ${2:// Your code here}",
      "} else if ${3:condition} {",
      "  ${4:// Your code here}",
      "} else {",
      "  ${5:// Your code here}",
      "}"
    ],
    "description": "Creates an if...else statement in Go."
  },
  "Go Ternary Operator": {
    "prefix": ["cotrTernary", "ternary", "conditionalOperator"],
    "body": ["${1:condition} ? ${2:trueValue} : ${3:falseValue}"],
    "description": "Creates a ternary operator in Go."
  }
}
