{
  "C# Types": {
    "prefix": "cotrTypes",
    "body": [
      "$BLOCK_COMMENT_START",
      "C# is a statically typed language.",
      "",
      "Types in C# include:",
      "- int: Integer",
      "- float: Single-precision floating-point number",
      "- double: Double-precision floating-point number",
      "- char: Character",
      "- bool: Boolean",
      "- string: String",
      "- int[]: Array of integers",
      "- List<int>: List of integers",
      "- Dictionary<K, V>: Dictionary with key type K and value type V",
      "- struct MyStruct: Custom value type with named fields",
      "- enum MyEnum: Enumeration type",
      "- void: Type representing the absence of a value",
      "- object: Base type of all other types",
      "- dynamic: Type for dynamic binding",
      "- var: Type inferred by the compiler",
      "- Nullable<T>: Type representing a value of type T or null",
      "- Tuple<T1, T2, ...>: Tuple with elements of different types",
      "- Action, Func<T>: Delegate types for methods",
      "",
      "Read more here: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/built-in-types",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Lists the types in C#."
  },  
  "C# String Type": {
    "prefix": "cotrString",
    "body": ["string"],
    "description": "The C# string type."
  },
  "C# Integer Type": {
    "prefix": "cotrInt",
    "body": ["int"],
    "description": "The C# int type."
  },
  "C# Double Type": {
    "prefix": "cotrNum",
    "body": ["double"],
    "description": "The C# double type."
  },
  "C# Float Type": {
    "prefix": "cotrNumAlt",
    "body": ["float"],
    "description": "The C# float type."
  },
  "C# Boolean Type": {
    "prefix": "cotrBoolean",
    "body": ["bool"],
    "description": "The C# boolean type."
  },
  "C# Boolean True": {
    "prefix": "cotrBoolTrue",
    "body": ["true"],
    "description": "The C# true value."
  },
  "C# Boolean False": {
    "prefix": "cotrBoolFalse",
    "body": ["false"],
    "description": "The C# false value."
  },
  "C# Date Type": {
    "prefix": "cotrDate",
    "body": ["DateTime"],
    "description": "The C# DateTime type."
  },  
  "C# Date Now": {
    "prefix": "cotrNow",
    "body": ["DateTime.Now"],
    "description": "The C# DateTime.Now property."
  },  
  "C# Interpolate String": {
    "prefix": "cotrInterpolate",
    "body": ["$\"${1:Your string here}\""],
    "description": "Interpolates a string in C#."
  },
  "C# Create Variable": {
    "prefix": "cotrVar",
    "body": ["${1:Type} ${2:myVar} = ${3:value};"],
    "description": "Creates a variable in C#."
  },
  "C# Create Typed Variable": {
    "prefix": "cotrVarTyped",
    "body": ["${1:Type} ${2:myVar} = $3;"],
    "description": "Creates a typed variable in C#."
  },  
  "C# Create Nullable Variable": {
    "prefix": "cotrVarNullable",
    "body": ["${1:Type}? ${2:myVar} = $3;"],
    "description": "Creates a nullable variable in C#."
  },  
  "C# Create String Variable": {
    "prefix": "cotrVarString",
    "body": ["string ${1:myString} = ${2:'Your string here'};"],
    "description": "Creates a string variable in C#."
  },
  "C# Create Multi-Line String Variable": {
    "prefix": "cotrVarStringMulti",
    "body": [
      "string ${1:myString} = @\"\"\"",
      "${2:Line 1}",
      "${3:Line 2}",
      "${4:Line 3}",
      "\"\"\";"
    ],
    "description": "Creates a multi-line string variable in C#."
  },
  "C# Create Integer Variable": {
    "prefix": "cotrVarInt",
    "body": ["int ${1:myInt} = ${2:0};"],
    "description": "Creates an integer variable in C#."
  },
  "C# Create Double Variable": {
    "prefix": "cotrVarDouble",
    "body": ["double ${1:myDouble} = ${2:0.0};"],
    "description": "Creates a double variable in C#."
  },
  "C# Create Boolean Variable": {
    "prefix": "cotrVarBool",
    "body": ["bool ${1:myBool} = ${2:true};"],
    "description": "Creates a boolean variable in C#."
  },
  "C# Create Date Variable": {
    "prefix": "cotrVarDate",
    "body": [
      "DateTime ${1:myDate} = new DateTime(${2:year}, ${3:month}, ${4:day});"
    ],
    "description": "Creates a date variable in C#."
  },  
  "C# Create List Variable": {
    "prefix": "cotrVarList",
    "body": ["List<${1:Type}> ${2:myList} = new List<${1:Type}>();"],
    "description": "Creates a list variable in C#."
  },
  "C# Create Dictionary Variable": {
    "prefix": "cotrVarMap",
    "body": [
      "Dictionary<${1:Key}, ${2:Value}> ${3:myDict} = new Dictionary<${1:Key}, ${2:Value}>();"
    ],
    "description": "Creates a dictionary variable in C#."
  },
  "C# Generate List": {
    "prefix": "cotrGenList",
    "body": [
      "var ${1:myList} = Enumerable.Range(0, ${2:length}).Select(i => ${3:'item'} + i.ToString()).ToList();"
    ],
    "description": "Generates a list of a specific length in C#."
  },
  "C# Generate Map": {
    "prefix": "cotrGenMap",
    "body": [
      "var ${1:myMap} = Enumerable.Range(0, ${2:length}).ToDictionary(i => i, i => ${3:'item'} + i.ToString());"
    ],
    "description": "Generates a dictionary of a specific length in C#."
  },
  "C# Create Constant": {
    "prefix": "cotrConst",
    "body": ["const ${1:Type} ${2:myConst} = ${3:value};"],
    "description": "Creates a constant variable in C#."
  },
  "C# Static Variable": {
    "prefix": "cotrStaticVar",
    "body": [
      "static ${2:Type} ${3:myStaticVar} = ${4:value};",
      "",
      "// Access the static variable",
      "// MyClass.${3:myStaticVar}"
    ],
    "description": "Creates a static variable in a C# class."
  },
  "C# Create Dictionary": {
    "prefix": "cotrMap",
    "body": [
      "Dictionary<${1:Key}, ${2:Value}> ${3:myDict} = new Dictionary<${1:Key}, ${2:Value}>();",
      "${3:myDict}.Add(${4:key}, ${5:value});"
    ],
    "description": "Creates a dictionary in C#."
  },
  "C# Create List": {
    "prefix": "cotrList",
    "body": [
      "List<${1:Type}> ${2:myList} = new List<${1:Type}>();",
      "${2:myList}.Add(${3:item});"
    ],
    "description": "Creates a list in C#."
  },
  "C# Print": {
    "prefix": "cotrPrint",
    "body": ["Console.WriteLine(${1:'Your message here'});"],
    "description": "Prints a message to the console in C#."
  },
  "C# Print Multi": {
    "prefix": "cotrPrintMulti",
    "body": [
      "Console.WriteLine(@\"\"\"",
      "${1:Line 1}",
      "${2:Line 2}",
      "${3:Line 3}",
      "\"\"\");"
    ],
    "description": "Prints a multi-line message to the console in C#."
  },  
  "C# For Loop": {
    "prefix": "cotrForLoop",
    "body": [
      "for (int ${1:i} = 0; $1 < ${2:10}; $1++) {",
      "  // Your code here",
      "}"
    ],
    "description": "Creates a for loop that iterates through a set of numbers with the index in C#."
  },
  "C# For Each Loop": {
    "prefix": "cotrForEachLoop",
    "body": [
      "foreach (${1:Type} ${2:item} in ${3:iterable}) {",
      "  ${4:// Your code here}",
      "}"
    ],
    "description": "Iterates over an iterable object in C#."
  },
  "C# While Loop": {
    "prefix": "cotrWhileLoop",
    "body": ["while (${1:condition}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates a while loop in C#."
  },
  "C# Do While Loop": {
    "prefix": "cotrDoWhileLoop",
    "body": ["do {", "  ${1:// Your code here}", "} while (${2:condition});"],
    "description": "Creates a do...while loop in C#."
  },
  "C# Switch Statement": {
    "prefix": "cotrSwitch",
    "body": [
      "switch (${1:variable}) {",
      "  case ${2:value1}:",
      "    ${3:// Your code here}",
      "    break;",
      "  case ${4:value2}:",
      "    ${5:// Your code here}",
      "    break;",
      "  default:",
      "    ${6:// Your code here}",
      "}"
    ],
    "description": "Creates a switch statement in C#."
  },
  "C# Function": {
    "prefix": "cotrFunc",
    "body": [
      "public ${1:void} ${2:MyFunction}(${3:parameters})",
      "{",
      "    ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a function in C#."
  },  
  "C# Function Args": {
    "prefix": "cotrFuncArgs",
    "body": [
      "public ${1:void} ${2:MyFunction}(${3:type1} ${4:arg1}, ${5:type2} ${6:arg2})",
      "{",
      "    ${7:// Your code here}",
      "}"
    ],
    "description": "Creates a function with arguments in C#."
  },  
  "C# Function Named Args": {
    "prefix": "cotrFuncNamedArgs",
    "body": [
      "// Note: C# does not have named arguments in function definitions.",
      "// You can use named parameters in method calls.",
      "public ${1:void} ${2:MyFunction}(${3:type1} ${4:arg1}, ${5:type2} ${6:arg2})",
      "{",
      "    ${7:// Your code here}",
      "}"
    ],
    "description": "Note about named arguments in C#."
  },  
  "C# Function Syntax": {
    "prefix": "cotrFuncSyntax",
    "body": [
      "// C# Function Syntax",
      "// Basic function: public returnType FunctionName(parameters) { ... }",
      "// Function with arguments: public returnType FunctionName(argType argName, ...) { ... }",
      "// Named parameters in method calls: FunctionName(argName: value, ...);"
    ],
    "description": "Outlines the syntax for functions in C#."
  },  
  "C# Comment": {
    "prefix": "cotrComment",
    "body": ["// ${1:Your comment here}"],
    "description": "Creates a single-line comment in C#."
  },
  "C# Multi-Line Comment": {
    "prefix": "cotrCommentMulti",
    "body": ["/*", " * ${1:Your comment here}", " */"],
    "description": "Creates a multi-line comment in C#."
  },
  "C# Throw Exception": {
    "prefix": "cotrThrow",
    "body": ["throw new ${1:Exception}(${2:'Your message here'});"],
    "description": "Throws an exception in C#."
  },
  "C# Try Catch": {
    "prefix": "cotrTryCatch",
    "body": [
      "try {",
      "  ${1:// Your code here}",
      "} catch (${2:Exception} ${3:e}) {",
      "  ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a try...catch block in C#."
  },
  "C# Enum": {
    "prefix": "cotrEnum",
    "body": [
      "enum ${1:MyEnum} {",
      "  ${2:value1},",
      "  ${3:value2},",
      "  // Add more values here",
      "}"
    ],
    "description": "Creates an enum in C#."
  },
  "C# Class": {
    "prefix": "cotrClass",
    "body": ["public class ${1:MyClass} {", "  ${2:// Your code here}", "}"],
    "description": "Creates a class in C#."
  },
  "C# If Statement": {
    "prefix": "cotrIf",
    "body": ["if (${1:condition}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates an if statement in C#."
  },
  "C# If Else Statement": {
    "prefix": "cotrIfElse",
    "body": [
      "if (${1:condition}) {",
      "  ${2:// Your code here}",
      "} else if (${3:condition}) {",
      "  ${4:// Your code here}",
      "} else {",
      "  ${5:// Your code here}",
      "}"
    ],
    "description": "Creates an if...else statement in C#."
  },
  "C# Ternary Operator": {
    "prefix": "cotrTernary",
    "body": ["${1:condition} ? ${2:trueValue} : ${3:falseValue}"],
    "description": "Creates a ternary operator in C#."
  },
  "C# Lambda Function": {
    "prefix": "cotrLambda",
    "body": ["(${1:parameters}) => ${2:expression}"],
    "description": "Creates a lambda function in C#."
  }
}
