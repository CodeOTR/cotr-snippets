{
  "C# Info": {
    "prefix": ["cotrInfo", "languageInfo", "info"],
    "body": [
      "// Typing: Statically typed",
      "// Paradigm: Multi-paradigm: structured, imperative, object-oriented, event-driven, task-driven, functional, generic, reflective, concurrent",
      "// Compilation: Compiled (.NET Framework), Just-In-Time (JIT) compilation (.NET Core)",
      "// Concurrency: Supports multi-threading, async/await"
    ],
    "description": "General information about C#."
  },
  "C# Entry Point": {
    "prefix": ["cotrEntry", "entry", "start", "startingPoint"],
    "body": [
      "// C# Entry Point",
      "// To run this program, use: `dotnet run` within the project directory",
      "",
      "class Program",
      "{",
      "    static void Main(string[] args)",
      "    {",
      "        // Your code here",
      "    }",
      "}"
    ],
    "description": "Creates the entry point of a C# application."
  },

  "C# Project Structure (High-Level)": {
    "prefix": ["cotrStructure", "structure", "architecture"],
    "body": [
      "// Recommended High-Level C# Project Structure:",
      "",
      "// - src/",
      "//   - Contains the source code for the application.",
      "//   - Organize by feature or purpose within separate directories or projects,",
      "//     such as:",
      "//     - Services/",
      "//     - Controllers/",
      "//     - Models/",
      "//     - Views/ (for web applications)",
      "",
      "// - lib/",
      "//   - Contains external libraries or dependencies, typically managed by NuGet.",
      "",
      "// - tests/",
      "//   - Contains unit tests, integration tests, etc.",
      "//   - Organize tests to reflect the structure of the src/ directory.",
      "",
      "// - docs/",
      "//   - Documentation related to the project.",
      "",
      "// - tools/",
      "//   - Contains scripts and other tools for the project (e.g., build scripts).",
      "",
      "// - build/",
      "//   - Contains build output.",
      "",
      "// Note:",
      "// - Projects in C# are often structured as solutions containing multiple",
      "//   projects (class libraries, web applications, etc.).",
      "// - This structure can vary depending on the project type and developer preferences."
    ],
    "description": "Explains a high-level project structure for C#."
  },
  "C# Mathematical Operators": {
    "prefix": ["cotrOperators", "operators", "mathDocs"],
    "body": [
      "// C# Mathematical Operators",
      "// Addition: +",
      "// Subtraction: -",
      "// Multiplication: *",
      "// Exponentiation: **",
      "// Division: /",
      "// Modulus: %",
      "// Increment: ++",
      "// Decrement: --",
      "// Assignment: =",
      "// Addition assignment: +=",
      "// Subtraction assignment: -=",
      "// Multiplication assignment: *=",
      "// Division assignment: /=",
      "// Modulus assignment: %="
    ],
    "description": "Lists the mathematical operators in C#."
  },
  "C# Equal To": {
    "prefix": ["cotrEqual", "equal"],
    "body": ["=="],
    "description": "C# equal to operator."
  },
  "C# Not Equal To": {
    "prefix": ["cotrNotEqual", "notEqual", "doesNotEqual"],
    "body": ["!="],
    "description": "C# not equal to operator."
  },
  "C# Boolean Operators": {
    "prefix": ["cotrOperatorsBool", "booleanOperators", "logic"],
    "body": [
      "// C# Boolean Operators",
      "// Logical AND: &&",
      "// Logical OR: ||",
      "// Logical NOT: !",
      "// Equality: ==",
      "// Inequality: !=",
      "// Greater than: >",
      "// Less than: <",
      "// Greater than or equal to: >=",
      "// Less than or equal to: <="
    ],
    "description": "Lists the boolean operators in C#."
  },
  "C# Type Check": {
    "prefix": ["cotrTypeCheck", "checkType", "getType", "typeOf"],
    "body": ["${1:variable}.GetType()"],
    "description": "Gets the type of a variable in C#."
  },
  "C# This Type Check": {
    "prefix": ["thisTypeCheck", "thisType", "getThisType"],
    "body": ["$CLIPBOARD.GetType().Name"],
    "description": "Gets the type of the variable in the clipboard in C#."
  },  
  "C# Type Comparison": {
    "prefix": ["cotrTypeCompare", "compareTypes"],
    "body": [
      "// Check if two variables have the same type:",
      "if (${1:variable1}.GetType() == ${2:variable2}.GetType()) {",
      "  // Your code here",
      "}"
    ],
    "description": "Compares the types of two variables in C#."
  },
  "C# Type Conversion": {
    "prefix": ["cotrTypeConvert", "cotrTypeCast", "cotrConvert"],
    "body": [
      "// C# Type Conversion:",
      "",
      "// Implicit conversions (compiler performs automatically):",
      "// - Smaller numeric types to larger numeric types (e.g., int to double).",
      "",
      "// Explicit conversions (using casts):",
      "// - (Type)variable  // C-style cast",
      "// - variable as Type  // Safe cast (returns null if conversion fails)",
      "// - Convert.ToType(variable)  // Conversion methods in the Convert class",
      "",
      "// Note:",
      "// - Be cautious with explicit conversions, as they can lead to data loss or errors if the conversion is not valid."
    ],
    "description": "Explains type conversion in C#."
  },
  "C# Types": {
    "prefix": [
      "cotrTypes",
      "types",
      "allTypes",
      "languageTypes",
      "builtInTypes",
      "dataTypes"
    ],
    "body": [
      "$BLOCK_COMMENT_START",
      "C# is a statically typed language.",
      "",
      "Types in C# include:",
      "- int: Integer",
      "- float: Single-precision floating-point number",
      "- double: Double-precision floating-point number",
      "- char: Character",
      "- bool: Boolean",
      "- string: String",
      "- int[]: Array of integers",
      "- List<int>: List of integers",
      "- Dictionary<K, V>: Dictionary with key type K and value type V",
      "- struct MyStruct: Custom value type with named fields",
      "- enum MyEnum: Enumeration type",
      "- void: Type representing the absence of a value",
      "- object: Base type of all other types",
      "- dynamic: Type for dynamic binding",
      "- var: Type inferred by the compiler",
      "- Nullable<T>: Type representing a value of type T or null",
      "- Tuple<T1, T2, ...>: Tuple with elements of different types",
      "- Action, Func<T>: Delegate types for methods",
      "",
      "Read more here: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/built-in-types",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Lists the types in C#."
  },
  "C# String Type": {
    "prefix": [
      "cotrTypesString",
      "stringType",
      "typeString",
      "textType",
      "typeText"
    ],
    "body": ["string"],
    "description": "The C# string type."
  },
  "C# Integer Type": {
    "prefix": ["cotrTypesInt", "intType", "typeInt"],
    "body": ["int"],
    "description": "The C# int type."
  },
  "C# Double Type": {
    "prefix": [
      "cotrTypesNum",
      "number",
      "numberType",
      "typeNumber",
      "double",
      "doubleType",
      "typeDouble"
    ],
    "body": ["double"],
    "description": "The C# double type."
  },
  "C# Float Type": {
    "prefix": ["cotrTypesNumAlt", "floatType", "typeFloat"],
    "body": ["float"],
    "description": "The C# float type."
  },
  "C# Boolean Type": {
    "prefix": ["cotrTypesBool", "booleanType", "typeBool"],
    "body": ["bool"],
    "description": "The C# boolean type."
  },
  "C# Boolean True": {
    "prefix": ["cotrTypesBoolTrue", "true", "booleanTrue", "on"],
    "body": ["true"],
    "description": "The C# true value."
  },
  "C# Boolean False": {
    "prefix": ["cotrTypesBoolFalse", "false", "off", "booleanFalse"],
    "body": ["false"],
    "description": "The C# false value."
  },
  "C# Date Type": {
    "prefix": ["cotrTypesDate", "dateType", "typeDate", "timeType", "timestampType", "dateTimeType"],
    "body": ["DateTime"],
    "description": "The C# DateTime type."
  },
  "C# Map Type": {
    "prefix": [
      "cotrTypesMap",
      "map",
      "mapType",
      "typeMap",
      "hashmap",
      "struct",
      "dict",
      "typeDict",
      "typeScruct"
    ],
    "body": ["Dictionary<${1:keyType}, ${2:valueType}>"],
    "description": "The C# Dictionary type, equivalent to a map."
  },
  "C# List Type": {
    "prefix": [
      "cotrTypesList",
      "list",
      "array",
      "listType",
      "typeList",
      "typeArray"
    ],
    "body": ["List<${1:type}>"],
    "description": "The C# List type."
  },
  "C# Null Type": {
    "prefix": ["cotrTypesNull", "nullType", "typesNull"],
    "body": ["null"],
    "description": "The C# null value."
  },
  "C# Dynamic Type": {
    "prefix": ["cotrTypesDynamic", "typesDynamic", "typesAny", "dynamicType", "anyType"],
    "body": ["dynamic"],
    "description": "The C# dynamic type."
  },
  "C# Date Now": {
    "prefix": ["cotrNow", "now", "currentTime", "dateNow"],
    "body": ["DateTime.Now"],
    "description": "The C# DateTime.Now property."
  },
  "C# Interpolate String": {
    "prefix": ["cotrInterpolate", "interpolate", "variableExpansion", "variableSubstitution", "stringPlaceholders", "stringInterpolation"],
    "body": ["$\"${1:Your string here}\""],
    "description": "Interpolates a string in C#."
  },
  "C# Concatenate Strings": {
    "prefix": ["cotrConcat", "concatenate", "combine"],
    "body": [
      "string result = string.Concat(${1:First string}, ${2:Second string});"
    ],
    "description": "Concatenates two strings in C#."
  },
  "C# Create Variable": {
    "prefix": ["cotrVar", "variable", "createVariable", "newVariable"],
    "body": ["${1:Type} ${2:myVar} = ${3:value};"],
    "description": "Creates a variable in C#."
  },

  "C# Variable Declaration Syntax": {
    "prefix": [
      "cotrVarSyntax",
      "variableSyntax",
      "howToVariables",
      "letSyntax"
    ],
    "body": [
      "// C# Variable Declaration Syntax:",
      "",
      "// - var: (Scope: Block)",
      "//   - Type is automatically inferred by the compiler.",
      "//   - Preferred for most variable declarations.",
      "",
      "// - type: (Scope: Block)",
      "//   - Explicitly specify the variable's type.",
      "//   - Use when var deduction is not desired or not possible.",
      "",
      "// - const: (Scope: Block)",
      "//   - Cannot be reassigned or redeclared.",
      "//   - Use for values that should remain constant.",
      "",
      "// Note:",
      "// - C# does not have a direct equivalent to 'let'.",
      "// - Use 'var' for most variable declarations.",
      "// - Use 'const' for values that should not change."
    ],
    "description": "Explains C# variable declaration syntax"
  },
  "C# Create Typed Variable": {
    "prefix": ["cotrVarTyped", "typedVariable", "variableWithType"],
    "body": ["${1:Type} ${2:myVar} = $3;"],
    "description": "Creates a typed variable in C#."
  },
  "C# Create Nullable Variable": {
    "prefix": ["cotrVarNullable", "variableNullable", "nullableVariable", "nil", "none", "nothing", "null", "option"],
    "body": ["${1:Type}? ${2:myVar} = $3;"],
    "description": "Creates a nullable variable in C#."
  },
  "C# Create String Variable": {
    "prefix": ["cotrVarString", "string", "stringVariable", "variableString", "text", "createString", "createText"],
    "body": ["string ${1:myString} = ${2:'Your string here'};"],
    "description": "Creates a string variable in C#."
  },
  "C# Create Multi-Line String Variable": {
    "prefix": ["cotrVarStringMulti", "multiLineString", "varStringMulti", "stringVariableMulti", "createMultiLineString"],
    "body": [
      "string ${1:myString} = @\"\"\"",
      "${2:Line 1}",
      "${3:Line 2}",
      "${4:Line 3}",
      "\"\"\";"
    ],
    "description": "Creates a multi-line string variable in C#."
  },
  "C# Create Integer Variable": {
    "prefix": ["cotrVarInt", "integer", "int", "variableInt", "intVariable", "createInt"],
    "body": ["int ${1:myInt} = ${2:0};"],
    "description": "Creates an integer variable in C#."
  },
  "C# Create Double Variable": {
    "prefix": ["cotrVarDouble", "double", "doubleVariable", "variableDouble", "createDouble"],
    "body": ["double ${1:myDouble} = ${2:0.0};"],
    "description": "Creates a double variable in C#."
  },
  "C# Create Boolean Variable": {
    "prefix": ["cotrVarBool", "variableBool", "bool", "boolVariable", "createBool"],
    "body": ["bool ${1:myBool} = ${2:true};"],
    "description": "Creates a boolean variable in C#."
  },
  "C# Create Date Variable": {
    "prefix": ["cotrVarDate", "dateVariable", "variableDate", "date"],
    "body": [
      "DateTime ${1:myDate} = new DateTime(${2:year}, ${3:month}, ${4:day});"
    ],
    "description": "Creates a date variable in C#."
  },
  "C# Create List Variable": {
    "prefix": ["cotrVarList", "createList", "listVariable", "arrayVariable", "variableList", "variableArray", "list", "array"],
    "body": ["List<${1:Type}> ${2:myList} = new List<${1:Type}>();"],
    "description": "Creates a list variable in C#."
  },
  "C# Create Dictionary Variable": {
    "prefix": ["cotrVarMap", "createMap", "createStruct", "variableMap", "variableStruct", "mapVariable", "structVariable", "dictVariable", "variableDict", "createDict"],
    "body": [
      "Dictionary<${1:Key}, ${2:Value}> ${3:myDict} = new Dictionary<${1:Key}, ${2:Value}>();"
    ],
    "description": "Creates a dictionary variable in C#."
  },
  "C# Generate List": {
    "prefix": ["cotrGenList", "generateList", "listGen"],
    "body": [
      "var ${1:myList} = Enumerable.Range(0, ${2:length}).Select(i => ${3:'item'} + i.ToString()).ToList();"
    ],
    "description": "Generates a list of a specific length in C#."
  },
  "C# Generate Map": {
    "prefix": ["cotrGenMap", "generateMap"],
    "body": [
      "var ${1:myMap} = Enumerable.Range(0, ${2:length}).ToDictionary(i => i, i => ${3:'item'} + i.ToString());"
    ],
    "description": "Generates a dictionary of a specific length in C#."
  },
  "C# Create Constant": {
    "prefix": ["cotrConst", "constant"],
    "body": ["const ${1:Type} ${2:myConst} = ${3:value};"],
    "description": "Creates a constant variable in C#."
  },
  "C# Static Variable": {
    "prefix": ["cotrVarStatic", "staticVariable", "associatedConstant"],
    "body": [
      "static ${2:Type} ${3:myStaticVar} = ${4:value};",
      "",
      "// Access the static variable",
      "// MyClass.${3:myStaticVar}"
    ],
    "description": "Creates a static variable in a C# class."
  },
  "C# Print": {
   "prefix": ["cotrPrint", "print", "log", "systemOut", "write", "consoleLog"],
    "body": ["Console.WriteLine(${1:'Your message here'});"],
    "description": "Prints a message to the console in C#."
  },
  "C# Print Multi": {
    "prefix": ["cotrPrintMulti", "printMultiLine"],
    "body": [
      "Console.WriteLine(@\"\"\"",
      "${1:Line 1}",
      "${2:Line 2}",
      "${3:Line 3}",
      "\"\"\");"
    ],
    "description": "Prints a multi-line message to the console in C#."
  },
  "C# For Loop": {
    "prefix": ["cotrForLoop", "forLoop", "forX"],
    "body": [
      "for (int ${1:i} = 0; $1 < ${2:10}; $1++) {",
      "  // Your code here",
      "}"
    ],
    "description": "Creates a for loop that iterates through a set of numbers with the index in C#."
  },
  "C# For Each Loop": {
    "prefix": ["cotrForEachLoop", "forEach"],
    "body": [
      "foreach (${1:Type} ${2:item} in ${3:iterable}) {",
      "  ${4:// Your code here}",
      "}"
    ],
    "description": "Iterates over an iterable object in C#."
  },
  "C# While Loop": {
    "prefix": ["cotrWhileLoop", "whileLoop", "whileTrue"],
    "body": ["while (${1:condition}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates a while loop in C#."
  },
  "C# Do While Loop": {
    "prefix": ["cotrDoWhileLoop", "doWhile"],
    "body": ["do {", "  ${1:// Your code here}", "} while (${2:condition});"],
    "description": "Creates a do...while loop in C#."
  },
  "C# Switch Statement": {
    "prefix": ["cotrSwitch", "switch", "switchStatement", "select", "case", "when"],
    "body": [
      "switch (${1:variable}) {",
      "  case ${2:value1}:",
      "    ${3:// Your code here}",
      "    break;",
      "  case ${4:value2}:",
      "    ${5:// Your code here}",
      "    break;",
      "  default:",
      "    ${6:// Your code here}",
      "}"
    ],
    "description": "Creates a switch statement in C#."
  },
  "C# Function": {
    "prefix": ["cotrFunc", "function", "subprogram", "procedure", "subroutine", "method"],
    "body": [
      "public ${1:void} ${2:MyFunction}(${3:})",
      "{",
      "    ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a function in C#."
  },
  "C# Function Args": {
    "prefix": ["cotrFuncArgs", "functionArgs", "functionWithArgs"],
    "body": [
      "// In C#, functions can have arguments with default values.",
      "public ${1:void} ${2:MyFunction}(${3:type1} ${4:arg1}, ${5:type2} ${6:arg2} = ${7:defaultValue})",
      "{",
      "    ${8:// Your code here}",
      "}"
    ],
    "description": "Creates a function with arguments in C#, including an argument with a default value."
  },
  "C# Function Named Args": {
    "prefix": ["cotrFuncArgsNamed", "functionNamedArgs"],
    "body": [
      "// Note: C# does not have named arguments in function definitions.",
      "// You can use named parameters in method calls.",
      "public ${1:void} ${2:MyFunction}(${3:type1} ${4:arg1}, ${5:type2} ${6:arg2})",
      "{",
      "    ${7:// Your code here}",
      "}"
    ],
    "description": "Note about named arguments in C#."
  },
  "C# Arrow Function": {
    "prefix": ["cotrFuncArrow", "arrowFunction", "functionArrow"],
    "body": [
      "Func<${2:parameters}, ${1:returnType}> ${3:myFunction} = (${4:parameters}) => {",
      "    ${5:// Your code here}",
      "};"
    ],
    "description": "Creates an arrow function (lambda) in C#."
  },
  "C# Anonymous Function": {
    "prefix": ["cotrFuncAnon", "anonFunc", "anonymous", "closure" ,"functionLiteral"],
    "body": ["(${1:parameters}) => {", "    ${2:// Your code here}", "};"],
    "description": "Creates an anonymous function (lambda) in C#."
  },
  "C# Lambda Function": {
    "prefix": ["cotrFuncLambda", "cotrLambda", "lambda"],
    "body": ["(${1:parameters}) => ${2:expression}"],
    "description": "Creates a lambda function in C#."
  },
  "C# Function Syntax": {
    "prefix": ["cotrFuncSyntax", "functionSyntax", "functionDocs"],
    "body": [
      "// C# Function Syntax",
      "// Basic function: public returnType FunctionName(parameters) { ... }",
      "// Function with arguments: public returnType FunctionName(argType argName, ...) { ... }",
      "// Named parameters in method calls: FunctionName(argName: value, ...);"
    ],
    "description": "Outlines the syntax for functions in C#."
  },
  "C# Comment": {
    "prefix": ["cotrComment", "comment", "note"],
    "body": ["// ${1:Your comment here}"],
    "description": "Creates a single-line comment in C#."
  },
  "C# Multi-Line Comment": {
    "prefix": [
      "cotrCommentMulti",
      "multiLineComment",
      "commentMultiLine",
      "blockComment"
    ],
    "body": ["/*", " * ${1:Your comment here}", " */"],
    "description": "Creates a multi-line comment in C#."
  },
  "C# Throw Exception": {
    "prefix": ["cotrThrow", "throwError", "throwException"],
    "body": ["throw new ${1:Exception}(${2:'Your message here'});"],
    "description": "Throws an exception in C#."
  },
  "C# Try Catch": {
    "prefix": ["cotrTryCatch", "tryCatch"],
    "body": [
      "try {",
      "  ${1:// Your code here}",
      "} catch (${2:Exception} ${3:e}) {",
      "  ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a try...catch block in C#."
  },
  "C# Enum": {
    "prefix": ["cotrEnum", "enum"],
    "body": [
      "enum ${1:MyEnum} {",
      "  ${2:value1},",
      "  ${3:value2},",
      "  // Add more values here",
      "}"
    ],
    "description": "Creates an enum in C#."
  },
  "C# Class": {
    "prefix": ["cotrClass", "class", "objectTemplate"],
    "body": ["public class ${1:MyClass} {", "  ${2:// Your code here}", "}"],
    "description": "Creates a class in C#."
  },
  "C# If Statement": {
    "prefix": ["cotrIf", "ifStatement"],
    "body": ["if (${1:condition}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates an if statement in C#."
  },
  "C# If Else Statement": {
    "prefix": ["cotrIfElse", "ifElseStatement"],
    "body": [
      "if (${1:condition}) {",
      "  ${2:// Your code here}",
      "} else if (${3:condition}) {",
      "  ${4:// Your code here}",
      "} else {",
      "  ${5:// Your code here}",
      "}"
    ],
    "description": "Creates an if...else statement in C#."
  },
  "C# Ternary Operator": {
    "prefix": ["cotrTernary", "ternary", "conditionalOperator"],
    "body": ["${1:condition} ? ${2:trueValue} : ${3:falseValue}"],
    "description": "Creates a ternary operator in C#."
  }
}
