{
  "Julia Info": {
    "prefix": ["cotrInfo", "languageInfo", "info"],
    "body": [
      "# Typing: Dynamically typed, but with optional type annotations and type inference",
      "# Paradigm: Multi-paradigm: functional, imperative, object-oriented",
      "# Compilation: Just-in-time (JIT) compiled",
      "# Concurrency: Supports multi-threading and distributed computing"
    ],
    "description": "Provides general information about the Julia programming language."
  },
  "Julia Entry Point": {
    "prefix": ["cotrEntry", "entry", "start", "startingPoint"],
    "body": [
      "# Julia Entry Point",
      "# To run this program, use: `julia filename.jl`",
      "",
      "println(\"Hello, World!\")"
    ],
    "description": "Creates the entry point of a Julia script."
  },
  "Julia Project Structure (High-Level)": {
    "prefix": ["cotrStructure", "structure", "architecture"],
    "body": [
      "# Recommended High-Level Julia Project Structure:",
      "",
      "# - src/",
      "#   - Contains the Julia source files.",
      "#   - Organize by feature or module.",
      "# - test/",
      "#   - Contains test files, often using a framework like Test.",
      "# - Project.toml",
      "#   - Defines project dependencies and configurations.",
      "# - Manifest.toml",
      "#   - Generated by the package manager, tracks exact versions of dependencies.",
      "# - docs/",
      "#   - Documentation files for the project.",
      "",
      "# Note:",
      "# - This structure is flexible and can be adjusted based on the project's requirements."
    ],
    "description": "Explains a high-level project structure for Julia."
  },
  "Julia Mathematical Operators": {
    "prefix": ["cotrOperators", "operators", "mathDocs"],
    "body": [
      "# Julia Mathematical Operators",
      "# Addition: +",
      "# Subtraction: -",
      "# Multiplication: *",
      "# Division: /",
      "# Modulus (Remainder): %",
      "# Exponentiation: ^",
      "# Increment: Use += 1",
      "# Decrement: Use -= 1",
      "# Assignment: =",
      "# Addition assignment: +=",
      "# Subtraction assignment: -=",
      "# Multiplication assignment: *=",
      "# Division assignment: /=",
      "# Modulus assignment: %=",
      "# Exponentiation assignment: ^="
    ],
    "description": "Lists the mathematical operators in Julia."
  },
  "Julia Equal To": {
    "prefix": ["cotrEqual", "equal"],
    "body": ["=="],
    "description": "Julia equal to operator."
  },
  "Julia Not Equal To": {
    "prefix": ["cotrNotEqual", "notEqual", "doesNotEqual"],
    "body": ["!="],
    "description": "Julia not equal to operator."
  },
  "Julia Boolean Operators": {
    "prefix": ["cotrOperatorsBool", "booleanOperators", "logic"],
    "body": [
      "# Julia Boolean Operators",
      "# Logical AND: &&",
      "# Logical OR: ||",
      "# Logical NOT: !",
      "# Equality: ==",
      "# Inequality: !=",
      "# Greater than: >",
      "# Less than: <",
      "# Greater than or equal to: >=",
      "# Less than or equal to: <="
    ],
    "description": "Lists the boolean operators in Julia."
  },
  "Julia Type Check": {
    "prefix": ["cotrTypeCheck", "checkType", "getType", "typeOf"],
    "body": ["typeof(${1:variable})"],
    "description": "Gets the type of a variable in Julia."
  },
  "Julia This Type Check": {
    "prefix": ["thisTypeCheck", "thisType", "getThisType"],
    "body": ["typeof($CLIPBOARD)"],
    "description": "Gets the type of the variable in the clipboard in Julia."
  },
  "Julia Type Comparison": {
    "prefix": ["cotrTypeCompare", "compareTypes"],
    "body": [
      "# Check if two variables have the same type:",
      "if typeof(${1:variable1}) === typeof(${2:variable2})",
      "  # Your code here",
      "end"
    ],
    "description": "Compares the types of two variables in Julia."
  },
  "Julia Type Conversion": {
    "prefix": ["cotrTypeCast", "convert", "cast"],
    "body": [
      "# Julia Type Conversion:",
      "",
      "# Implicit conversions (Julia performs automatically):",
      "# - Can be unpredictable, especially with loose equality (==).",
      "",
      "# Explicit conversions:",
      "# - convert(TargetType, variable)  # Conversion function",
      "# - TargetType(variable)  // Constructor call",
      "",
      "# Note:",
      "# - Be aware of implicit conversions and use explicit conversions when necessary for clarity and control."
    ],
    "description": "Explains type conversion in Julia."
  },
  "Julia Types": {
    "prefix": [
      "cotrTypes",
      "types",
      "allTypes",
      "languageTypes",
      "builtInTypes",
      "dataTypes"
    ],
    "body": [
      "$BLOCK_COMMENT_START",
      "Julia is a dynamically typed language with optional type annotations.",
      "",
      "Some common types in Julia include:",
      "- Int, Int8, Int16, Int32, Int64: Signed integers",
      "- UInt, UInt8, UInt16, UInt32, UInt64: Unsigned integers",
      "- Float32, Float64: Floating-point numbers",
      "- Bool: Boolean",
      "- Char: Character",
      "- String: String",
      "- Array{T}: Array of type T",
      "- Tuple{T1, T2, ...}: Tuple with elements of different types",
      "- Dict{K, V}: Dictionary with key type K and value type V",
      "- Function: Function object",
      "- Type: Type object",
      "- Abstract type: Base type for user-defined types",
      "- struct MyStruct: Custom data structure with named fields",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Lists some common types in Julia."
  },
  "Julia String Type": {
    "prefix": [
      "cotrTypesString",
      "stringType",
      "typeString",
      "textType",
      "typeText"
    ],
    "body": ["String"],
    "description": "The Julia String type."
  },
  "Julia Integer Type": {
    "prefix": ["cotrTypesInt", "intType", "typeInt"],
    "body": ["Int"],
    "description": "The Julia Int type."
  },
  "Julia Double Type": {
    "prefix": [
      "cotrTypesNum",
      "numberType",
      "typeNumber",
      "doubleType",
      "typeDouble"
    ],
    "body": ["Float64"],
    "description": "The Julia Float64 type."
  },
  "Julia Float Type": {
    "prefix": ["cotrTypesNumAlt", "floatType", "typeFloat"],
    "body": ["Float32"],
    "description": "The Julia Float32 type."
  },
  "Julia Boolean Type": {
    "prefix": ["cotrTypesBool", "booleanType", "typeBool"],
    "body": ["Bool"],
    "description": "The Julia Bool type."
  },
  "Julia Boolean True": {
    "prefix": ["cotrTypesBoolTrue", "true", "booleanTrue", "on"],
    "body": ["true"],
    "description": "The Julia true value."
  },
  "Julia Boolean False": {
    "prefix": ["cotrTypesBoolFalse", "false", "off", "booleanFalse"],
    "body": ["false"],
    "description": "The Julia false value."
  },
  "Julia Date Type": {
    "prefix": [
      "cotrTypesDate",
      "dateType",
      "typeDate",
      "timeType",
      "timestampType",
      "dateTimeType"
    ],
    "body": ["DateTime"],
    "description": "The Julia DateTime type."
  },
  "Julia Map Type": {
    "prefix": [
      "cotrTypesMap",
      "mapType",
      "typeMap",
      "hashmapType",
      "structType",
      "dictType",
      "typeDict",
      "typeScruct"
    ],
    "body": ["Dict{K, V}"],
    "description": "The Julia Dict type, equivalent to a map."
  },
  "Julia List Type": {
    "prefix": ["cotrTypesList", "listType", "typeList", "typeArray"],
    "body": ["Array{${1:T},1} where T"],
    "description": "The Julia Array type for a 1-dimensional list."
  },
  "Julia Any Type": {
    "prefix": [
      "cotrTypesDynamic",
      "typesDynamic",
      "typesAny",
      "dynamicType",
      "anyType"
    ],
    "body": ["Any"],
    "description": "The Julia Any type, equivalent to dynamic in other languages."
  },
  "Julia Date Now": {
    "prefix": ["cotrNow", "now", "currentTime", "dateNow"],
    "body": ["Dates.now()"],
    "description": "The Julia Dates.now() function to get the current date and time."
  },
  "Julia Nothing Type": {
    "prefix": ["cotrTypesNull", "nullType", "typesNull"],
    "body": ["nothing"],
    "description": "The Julia nothing value, similar to null in other languages."
  },
  "Julia Create Variable": {
    "prefix": ["cotrVar", "variable", "createVariable", "newVariable"],
    "body": ["${1:myVar} = $2"],
    "description": "Creates a variable in Julia."
  },
  "Variable Declaration Syntax": {
    "prefix": [
      "cotrVarSyntax",
      "variableSyntax",
      "howToVariables",
      "letSyntax"
    ],
    "body": [
      "# Julia Variable Declaration Syntax:",
      "",
      "# - variable = value",
      "# - Type is automatically inferred by the compiler.",
      "# - Preferred for most variable declarations.",
      "",
      "# - variable::Type = value",
      "# - Explicitly specify the variable's type.",
      "# - Use when type annotation is desired or required.",
      "",
      "# - const variable = value",
      "# - Cannot be reassigned or redeclared.",
      "# - Use for values that should remain constant.",
      "",
      "# Note:",
      "# - Use plain assignment for most variable declarations.",
      "# - Use type annotation when explicit typing is desired.",
      "# - Use 'const' for values that are known at compile time and should not change."
    ],
    "description": "Explains Julia variable declaration syntax"
  },
  "Julia Create Typed Variable": {
    "prefix": ["cotrVarTyped", "typedVariable", "variableWithType"],
    "body": ["${1:myVar}::${2:Type} = $3"],
    "description": "Creates a typed variable in Julia."
  },
  "Julia Create Nullable Variable": {
    "prefix": [
      "cotrVarNullable",
      "variableNullable",
      "nullableVariable",
      "nil",
      "none",
      "nothing",
      "null",
      "option"
    ],
    "body": ["${1:myVar}::Union{${2:Type},Nothing} = $3"],
    "description": "Creates a nullable variable in Julia using the Union type with Nothing."
  },
  "Julia Interpolate String": {
    "prefix": [
      "cotrInterpolate",
      "interpolate",
      "variableExpansion",
      "variableSubstitution",
      "stringPlaceholders",
      "stringInterpolation"
    ],
    "body": ["\"Your string here \\$${1:variable}\""],
    "description": "Interpolates a variable into a string in Julia."
  },
  "Julia Concatenate Strings": {
    "prefix": ["cotrConcat", "concatenate", "combine"],
    "body": ["\"Your string here \" * ${1:variable}"],
    "description": "Concatenates two strings in Julia."
  },
  "Julia Create String Variable": {
    "prefix": [
      "cotrVarString",
      "string",
      "stringVariable",
      "variableString",
      "text",
      "createString",
      "createText"
    ],
    "body": ["${1:myString} = \"${2:Your string here}\""],
    "description": "Creates a string variable in Julia."
  },
  "Julia Create Multiline String Variable": {
    "prefix": [
      "cotrVarStringMulti",
      "multiLineString",
      "varStringMulti",
      "stringVariableMulti",
      "createMultiLineString"
    ],
    "body": ["${1:myString} = \"\"\"", "${2:Your string here}", "\"\"\""],
    "description": "Creates a multi-line string variable in Julia."
  },
  "Julia Create Integer Variable": {
    "prefix": [
      "cotrVarInt",
      "integer",
      "int",
      "variableInt",
      "intVariable",
      "createInt"
    ],
    "body": ["${1:myInt} = ${2:0}"],
    "description": "Creates an integer variable in Julia."
  },
  "Julia Create Float Variable": {
    "prefix": [
      "cotrVarDouble",
      "double",
      "floatVariable",
      "variableFloat",
      "createFloat"
    ],
    "body": ["${1:myFloat} = ${2:0.0}"],
    "description": "Creates a float variable in Julia."
  },
  "Julia Create Boolean Variable": {
    "prefix": [
      "cotrVarBool",
      "variableBool",
      "bool",
      "boolVariable",
      "createBool"
    ],
    "body": ["${1:myBool} = ${2:true}"],
    "description": "Creates a boolean variable in Julia."
  },
  "Julia Create Array Variable": {
    "prefix": [
      "cotrVarList",
      "createList",
      "listVariable",
      "arrayVariable",
      "variableList",
      "variableArray",
      "list",
      "array"
    ],
    "body": ["${1:myArray} = [${2:items}]"],
    "description": "Creates an array variable in Julia."
  },
  "Julia Create Dictionary Variable": {
    "prefix": ["cotrVarDict", "createDict", "dictVariable", "variableDict"],
    "body": [
      "${1:myDict} = Dict(",
      "  ${2:key1} => ${3:value1},",
      "  ${4:key2} => ${5:value2}",
      ")"
    ],
    "description": "Creates a dictionary variable in Julia."
  },
  "Julia Create Date Variable": {
    "prefix": ["cotrVarDate", "dateVariable", "variableDate", "date"],
    "body": ["${1:myDate} = Dates.Date(${2:year}, ${3:month}, ${4:day})"],
    "description": "Creates a date variable in Julia."
  },
  "Julia Create Constant": {
    "prefix": ["cotrConst", "constant"],
    "body": ["const ${1:myConst} = $2"],
    "description": "Creates a constant variable in Julia using the const keyword."
  },
  "Julia Static Variable": {
    "prefix": ["cotrVarStatic", "staticVariable", "associatedConstant"],
    "body": [
      "${1:myStaticVar} = ${2:value}",
      "",
      "# Access the static variable",
      "# ${1:myStaticVar}"
    ],
    "description": "Creates a static variable in a Julia module or function."
  },
  "Julia Generate Dict": {
    "prefix": ["cotrGenMap", "generateDict", "generateMap"],
    "body": [
      "${1:myDict} = Dict(i => \"key$i\" => \"value$i\" for i in 1:${2:length})"
    ],
    "description": "Generates a dictionary with a specific number of key-value pairs in Julia."
  },
  "Julia Generate Array": {
    "prefix": ["cotrGenList", "generateArray", "arrayGen", "generateList"],
    "body": ["${1:myArray} = [\"${2:item}$i\" for i in 1:${3:length}]"],
    "description": "Generates an array of a specific length in Julia."
  },
  "Julia Print": {
    "prefix": ["cotrPrint", "print", "log", "systemOut", "write", "consoleLog"],
    "body": ["println(${1:\"Your message here\"})"],
    "description": "Prints a message to the console in Julia."
  },
  "Julia Print Multi": {
    "prefix": ["cotrPrintMulti", "printMultiLine"],
    "body": [
      "println(\"\"\"",
      "${1:Line 1}",
      "${2:Line 2}",
      "${3:Line 3}",
      "\"\"\")"
    ],
    "description": "Prints a multi-line message to the console in Julia."
  },
  "Julia For Loop": {
    "prefix": ["cotrForLoop", "forLoop", "forX"],
    "body": ["for ${1:i} in 1:${2:10}", "    # Your code here", "end"],
    "description": "Creates a for loop that iterates through a set of numbers with the index in Julia."
  },
  "Julia For Each Loop": {
    "prefix": ["cotrForEachLoop", "forEach", "forIn", "forOf"],
    "body": [
      "for ${1:item} in ${2:iterable}",
      "    ${3:# Your code here}",
      "end"
    ],
    "description": "Iterates over an iterable object in Julia."
  },
  "Julia While Loop": {
    "prefix": ["cotrWhileLoop", "whileLoop", "whileTrue"],
    "body": ["while ${1:condition}", "    ${2:# Your code here}", "end"],
    "description": "Creates a while loop in Julia."
  },
  "Julia If-Elseif-Else Statement": {
    "prefix": ["cotrIfElseif", "ifElseif", "ifElse"],
    "body": [
      "if ${1:condition1}",
      "    ${2:# Your code here}",
      "elseif ${3:condition2}",
      "    ${4:# Your code here}",
      "else",
      "    ${5:# Your code here}",
      "end"
    ],
    "description": "Creates an if-elseif-else statement in Julia."
  },
  "Julia Function": {
    "prefix": [
      "cotrFunc",
      "function",
      "subprogram",
      "procedure",
      "subroutine",
      "method"
    ],
    "body": [
      "function ${1:myFunction}(${2:args})",
      "    ${3:# Your code here}",
      "end"
    ],
    "description": "Creates a function in Julia."
  },
  "Julia Function Args": {
    "prefix": ["cotrFuncArgs", "functionArgs", "functionWithArgs"],
    "body": [
      "# In Julia, functions can have optional positional arguments with default values.",
      "function ${1:myFunction}(${2:arg1}::${3:Type}, ${4:arg2}::${5:Type} = ${6:defaultValue})",
      "    ${7:# Your code here}",
      "end"
    ],
    "description": "Creates a function with arguments in Julia, including an optional positional argument with a default value."
  },
  "Julia Function Named Args": {
    "prefix": ["cotrFuncArgsNamed", "functionNamedArgs"],
    "body": [
      "function ${1:myFunction}(;${2:arg1}::${3:Type}, ${4:arg2}::${5:Type})",
      "    ${6:# Your code here}",
      "end"
    ],
    "description": "Creates a function with named arguments in Julia."
  },
  "Julia Function Arrow": {
    "prefix": ["cotrFuncArrow", "arrowFunction", "functionArrow"],
    "body": ["${1:myFunction}(${2:parameters}) = ${3:expression}"],
    "description": "Creates a function using the arrow syntax in Julia."
  },
  "Julia Function Anonymous": {
    "prefix": [
      "cotrFuncAnon",
      "anonFunc",
      "anonymous",
      "closure",
      "lambda",
      "functionLiteral",
      "cotrFuncLambda"
    ],
    "body": ["function (${1:parameters})", "    ${2:# Your code here}", "end"],
    "description": "Creates an anonymous function in Julia."
  },
  "Julia Function Syntax": {
    "prefix": ["cotrFuncSyntax", "functionSyntax", "functionDocs"],
    "body": [
      "# Julia Function Syntax",
      "# Basic function: function functionName(parameters) ... end",
      "# Function with arguments: function functionName(arg1::Type, arg2::Type, ...) ... end",
      "# Function with named arguments: function functionName(;arg1::Type, arg2::Type, ...) ... end"
    ],
    "description": "Outlines the syntax for functions in Julia."
  },
  "Julia Comment": {
    "prefix": ["cotrComment", "comment", "note"],
    "body": ["# ${1:Your comment here}"],
    "description": "Creates a single-line comment in Julia."
  },
  "Julia Multi-Line Comment": {
    "prefix": [
      "cotrCommentMulti",
      "multiLineComment",
      "commentMultiLine",
      "blockComment"
    ],
    "body": ["#=", "${1:Your comment here}", "=#"],
    "description": "Creates a multi-line comment in Julia."
  },
  "Julia Throw Exception": {
    "prefix": ["cotrThrow", "throwError", "throwException"],
    "body": ["throw(${1:ErrorException(\"Your message here\")})"],
    "description": "Throws an exception in Julia."
  },
  "Julia Try Catch": {
    "prefix": ["cotrTryCatch", "tryCatch"],
    "body": [
      "try",
      "    ${1:# Your code here}",
      "catch ${2:exception}",
      "    ${3:# Your code here}",
      "end"
    ],
    "description": "Creates a try...catch block in Julia."
  },
  "Julia Enum": {
    "prefix": ["cotrEnum", "enum"],
    "body": [
      "@enum ${1:MyEnum} begin",
      "    ${2:value1}",
      "    ${3:value2}",
      "    # Add more values here",
      "end"
    ],
    "description": "Creates an enum in Julia."
  },
  "Julia Struct": {
    "prefix": ["cotrStruct", "struct", "objectTemplate"],
    "body": ["struct ${1:MyStruct}", "    ${2:# Your code here}", "end"],
    "description": "Creates a struct in Julia."
  },
  "Julia If Statement": {
    "prefix": ["cotrIf", "ifStatement"],
    "body": ["if ${1:condition}", "    ${2:# Your code here}", "end"],
    "description": "Creates an if statement in Julia."
  },
  "Julia If Else Statement": {
    "prefix": ["cotrIfElse", "ifElseStatement"],
    "body": [
      "if ${1:condition}",
      "    ${2:# Your code here}",
      "elseif ${3:condition}",
      "    ${4:# Your code here}",
      "else",
      "    ${5:# Your code here}",
      "end"
    ],
    "description": "Creates an if...else statement in Julia."
  },
  "Julia Ternary Operator": {
    "prefix": ["cotrTernary", "ternary", "conditionalOperator"],
    "body": ["${1:condition} ? ${2:trueValue} : ${3:falseValue}"],
    "description": "Creates a ternary operator in Julia."
  },
  "Julia Lambda Function": {
    "prefix": "cotrLambda",
    "body": ["(${1:parameters}) -> ${2:expression}"],
    "description": "Creates a lambda function in Julia."
  },
  "Julia Match Statement": {
    "prefix": ["cotrSwitch", "switch", "matchStatement", "match"],
    "body": [
      "match ${1:variable}",
      "    ${2:pattern1} => ${3:expression1}",
      "    ${4:pattern2} => ${5:expression2}",
      "    _ => ${6:default_expression}",
      "end"
    ],
    "description": "Creates a match statement in Julia."
  },
  "Julia Create Numeric Variable": {
    "prefix": ["cotrVarNum", "numeric", "number", "createNumber"],
    "body": ["${1:myNum} = ${2:0}"],
    "description": "Creates a numeric variable in Julia."
  }
}
