{
  "Kotlin Info": {
    "prefix": ["cotrInfo", "languageInfo", "info"],
    "scope": "kotlin",
    "body": [
      "Typing: Statically typed",
      "Paradigm: Multi-paradigm: object-oriented, functional, imperative",
      "Compilation: Compiled to bytecode for the Java Virtual Machine (JVM), JavaScript, or native binaries",
      "Concurrency: Supports coroutines for asynchronous programming and concurrency"
    ],
    "description": "Provides general information about the Kotlin programming language."
  },
  "Kotlin Entry Point": {
    "prefix": ["cotrEntry", "entry", "start", "startingPoint"],
    "scope": "kotlin",
    "body": [
      "// Kotlin Entry Point",
      "// To run this program, use: `kotlinc filename.kt -include-runtime -d filename.jar && java -jar filename.jar`",
      "",
      "fun main() {",
      "    println(\"Hello, World!\")",
      "}"
    ],
    "description": "Creates the entry point of a Kotlin application."
  },
  "Kotlin Project Structure (High-Level)": {
    "prefix": ["cotrStructure", "structure", "architecture"],
    "scope": "kotlin",
    "body": [
      "// Recommended High-Level Kotlin Project Structure:",
      "",
      "// - src/main/kotlin/",
      "//   - Contains Kotlin source files.",
      "//   - Organize code into packages reflecting features or functionality.",
      "//   - Example: com/example/myapp/domain, com/example/myapp/service, etc.",
      "",
      "// - src/main/resources/",
      "//   - Contains project resources, such as property files, configuration, and static assets.",
      "",
      "// - src/test/kotlin/",
      "//   - Contains Kotlin test files.",
      "//   - Structure should mirror the src/main/kotlin directory.",
      "",
      "// - src/test/resources/",
      "//   - Contains resources for testing, like test configurations and data.",
      "",
      "// - lib/",
      "//   - Contains external libraries or dependencies not managed by the build system.",
      "//   - Typically, dependencies are managed by Gradle or Maven and may not need this directory.",
      "",
      "// - build/",
      "//   - Contains compiled bytecode files and other build artifacts (Gradle or Maven output).",
      "",
      "// - docs/",
      "//   - Contains project documentation, like API docs, design documents, and user guides.",
      "",
      "// - scripts/",
      "//   - Contains build and utility scripts, like shell scripts for automation tasks.",
      "",
      "// Note:",
      "// - Use build tools like Gradle or Maven for dependency management and build processes.",
      "// - This structure can vary depending on the specific needs and scale of the project."
    ],
    "description": "Explains a high-level project structure for Kotlin."
  },
  "Kotlin Mathematical Operators": {
    "prefix": ["cotrOperators", "operators", "mathDocs"],
    "scope": "kotlin",
    "body": [
      "// Kotlin Mathematical Operators",
      "// Addition: +",
      "// Subtraction: -",
      "// Multiplication: *",
      "// Exponentiation: **",
      "// Division: /",
      "// Modulus (Remainder): %",
      "// Increment: ++",
      "// Decrement: --",
      "// Assignment: =",
      "// Addition assignment: +=",
      "// Subtraction assignment: -=",
      "// Multiplication assignment: *=",
      "// Division assignment: /=",
      "// Modulus assignment: %="
    ],
    "description": "Lists the mathematical operators in Kotlin."
  },
  "Kotlin Equal To": {
    "prefix": ["cotrEqual", "equal"],
    "scope": "kotlin",
    "body": ["=="],
    "description": "Kotlin equal to operator (structural equality for objects)."
  },
  "Kotlin Not Equal To": {
    "prefix": ["cotrNotEqual", "notEqual", "doesNotEqual"],
    "scope": "kotlin",
    "body": ["!="],
    "description": "Kotlin not equal to operator."
  },
  "Kotlin Boolean Operators": {
    "prefix": ["cotrOperatorsBool", "booleanOperators", "logic"],
    "scope": "kotlin",
    "body": [
      "// Kotlin Boolean Operators",
      "// Logical AND: &&",
      "// Logical OR: ||",
      "// Logical NOT: !",
      "// Equality: ==",
      "// Inequality: !=",
      "// Greater than: >",
      "// Less than: <",
      "// Greater than or equal to: >=",
      "// Less than or equal to: <="
    ],
    "description": "Lists the boolean operators in Kotlin."
  },
  "Kotlin Type Check": {
    "prefix": ["cotrTypeCheck", "checkType", "getType", "typeOf"],
    "scope": "kotlin",
    "body": ["${1:variable}::class"],
    "description": "Gets the type of a variable in Kotlin."
  },"Kotlin This Type Check": {
    "prefix": ["thisTypeCheck", "thisType", "getThisType"],
    "scope": "kotlin",
    "body": ["$CLIPBOARD::class.simpleName"],
    "description": "Gets the simple name of the class of the variable in the clipboard in Kotlin."
  }
,  

  "Kotlin Type Comparison": {
    "prefix": ["cotrTypeCompare", "compareTypes"],
    "scope": "kotlin",
    "body": [
      "// Check if two variables have the same type:",
      "if (${1:variable1}::class == ${2:variable2}::class) {",
      "  // Your code here",
      "}"
    ],
    "description": "Compares the types of two variables in Kotlin."
  },
  "Kotlin Type Conversion": {
    "prefix": ["cotrTypeCast", "convert", "cast"],
    "scope": "kotlin",
    "body": [
      "// Kotlin Type Conversion:",
      "",
      "// Implicit conversions (compiler performs automatically):",
      "// - Smaller numeric types to larger numeric types (e.g., Int to Double).",
      "",
      "// Explicit conversions (using casts):",
      "// - variable as Type  // Safe cast (returns null if conversion fails)",
      "// - variable.toType()  // Conversion methods (e.g., toInt(), toDouble())",
      "",
      "// Note:",
      "// - Be cautious with explicit conversions, as they can lead to data loss or errors if the conversion is not valid."
    ],
    "description": "Explains type conversion in Kotlin."
  },
  "Kotlin Types": {
    "prefix": ["cotrTypes", "types", "allTypes", "languageTypes", "builtInTypes", "dataTypes"],
    "scope": "kotlin",
    "body": [
      "$BLOCK_COMMENT_START",
      "Kotlin is a statically typed language.",
      "",
      "Types in Kotlin include:",
      "- Int: Integer",
      "- Double: Double-precision floating-point number",
      "- Float: Single-precision floating-point number",
      "- Char: Character",
      "- Boolean: Boolean",
      "- String: String",
      "- Array<T>: Array of type T",
      "- List<T>: List of type T",
      "- Set<T>: Set of unique elements of type T",
      "- Map<K, V>: Map with key type K and value type V",
      "- Any: Base type of all non-nullable types",
      "- Unit: Type with only one value - Unit (similar to void)",
      "- Nothing: Type with no values - used for functions that never return",
      "- Nullable types (e.g., Int?, String?): Types that can hold a value or null",
      "- Function types (e.g., (Int, Int) -> Int): Types representing functions",
      "- Data classes: Classes primarily used to hold data",
      "- Sealed classes: Classes that restrict which other classes can inherit from them",
      "- Enum classes: Enumeration classes",
      "- Object: Singleton object",
      "- Companion object: Object associated with a class",
      "- Interface: Interface type",
      "",
      "Read more here: https://kotlinlang.org/docs/basic-types.html",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Lists the types in Kotlin."
  },
  "Kotlin String Type": {
    "prefix": ["cotrTypesString", "stringType", "typeString", "textType", "typeText"],
    "scope": "kotlin",
    "body": ["String"],
    "description": "The Kotlin String type."
  },
  "Kotlin Integer Type": {
    "prefix": ["cotrTypesInt", "intType", "typeInt"],
    "scope": "kotlin",
    "body": ["Int"],
    "description": "The Kotlin Int type."
  },
  "Kotlin Double Type": {
    "prefix": ["cotrTypesNum", "numberType", "typeNumber", "doubleType", "typeDouble"],
    "scope": "kotlin",
    "body": ["Double"],
    "description": "The Kotlin Double type."
  },
  "Kotlin Float Type": {
    "prefix": ["cotrTypesNumAlt", "floatType", "typeFloat"],
    "scope": "kotlin",
    "body": ["Float"],
    "description": "The Kotlin Float type."
  },
  "Kotlin Boolean Type": {
    "prefix": ["cotrTypesBool", "booleanType", "typeBool"],
    "scope": "kotlin",
    "body": ["Boolean"],
    "description": "The Kotlin Boolean type."
  },
  "Kotlin Boolean True": {
    "prefix": ["cotrTypesBoolTrue", "true", "booleanTrue", "on"],
    "scope": "kotlin",
    "body": ["true"],
    "description": "The Kotlin true value."
  },
  "Kotlin Boolean False": {
    "prefix": ["cotrTypesBoolFalse", "false", "off", "booleanFalse"],
    "scope": "kotlin",
    "body": ["false"],
    "description": "The Kotlin false value."
  },
  "Kotlin Date Type": {
    "prefix": ["cotrTypesDate", "dateType", "typeDate", "timeType", "timestampType", "dateTimeType"],
    "scope": "kotlin",
    "body": ["import java.time.LocalDate"],
    "description": "The Kotlin LocalDate class from the java.time package."
  },
  "Kotlin Map Type": {
    "prefix": ["cotrTypesMap", "mapType", "typeMap", "hashmapType", "structType", "dictType", "typeDict", "typeScruct"],
    "scope": "kotlin",
    "body": ["Map<${1:keyType}, ${2:valueType}>"],
    "description": "The Kotlin Map type."
  },
  "Kotlin List Type": {
    "prefix": ["cotrTypesList", "listType", "typeList", "typeArray"],
    "scope": "kotlin",
    "body": ["List<${1:type}>"],
    "description": "The Kotlin List type."
  },
  "Kotlin Null Type": {
    "prefix": ["cotrTypesNull", "nullType", "typesNull"],
    "scope": "kotlin",
    "body": ["null"],
    "description": "The Kotlin null value."
  },
  "Kotlin Dynamic Type": {
    "prefix": ["cotrTypesAny", "dynamicType", "anyType", "typesDynamic", "typesAny"],
    "scope": "kotlin",
    "body": ["Any"],
    "description": "The Kotlin Any type."
  },
  "Kotlin Date Now": {
    "prefix": ["cotrNow", "now", "currentTime", "dateNow"],
    "scope": "kotlin",
    "body": [
      "import java.time.LocalDate",
      "",
      "val now: LocalDate = LocalDate.now()"
    ],
    "description": "Gets the current date in Kotlin."
  },
  "Kotlin Character Type": {
    "prefix": ["cotrTypesChar"],
    "scope": "kotlin",
    "body": ["Char"],
    "description": "The Kotlin Char type."
  },
  "Kotlin Interpolate String": {
    "prefix": ["cotrInterpolate", "interpolate", "variableExpansion", "variableSubstitution", "stringPlaceholders", "stringInterpolation"],
    "scope": "kotlin",
    "body": ["\"${1:Your message here}\""],
    "description": "Interpolates a string in Kotlin."
  },
  "Kotlin Concatenate String": {
    "prefix": ["cotrConcat", "concatenate", "combine"],
    "scope": "kotlin",
    "body": ["\"${1:Your message here}\" + \"${2:another message}\""],
    "description": "Concatenates two strings in Kotlin."
  },
  "Kotlin Create Variable": {
    "prefix": ["cotrVar", "variable", "createVariable", "newVariable"],
    "scope": "kotlin",
    "body": ["var ${1:myVar} = $2"],
    "description": "Creates a variable in Kotlin using the var keyword."
  },
  "Variable Declaration Syntax": {
    "prefix": ["cotrVarSyntax", "variableSyntax", "howToVariables", "letSyntax"],
    "scope": "kotlin",
    "body": [
      "// Kotlin Variable Declaration Syntax:",
      "",
      "// - var: (Scope: Block or Class)",
      "//   - Can be reassigned.",
      "//   - Use for variables that need to be changed.",
      "",
      "// - val: (Scope: Block or Class)",
      "//   - Cannot be reassigned after initialization.",
      "//   - Preferred for values that should remain constant.",
      "",
      "// Note:",
      "// - Use 'val' by default for values that won't change.",
      "// - Use 'var' only when you need to reassign the variable."
    ],
    "description": "Explains Kotlin variable declaration syntax"
  },
  "Kotlin Create Typed Variable": {
    "prefix": ["cotrVarTyped", "typedVariable", "variableWithType"],
    "scope": "kotlin",
    "body": ["var ${1:myVar}: ${2:Type} = $3"],
    "description": "Creates a typed variable in Kotlin."
  },
  "Kotlin Create Nullable Variable": {
    "prefix": ["cotrVarNullable", "variableNullable", "nullableVariable", "nil", "none", "nothing", "null", "option"],
    "scope": "kotlin",
    "body": ["var ${1:myVar}: ${2:Type}? = null"],
    "description": "Creates a nullable variable in Kotlin."
  },
  "Kotlin Create String Variable": {
    "prefix": ["cotrVarString", "string", "stringVariable", "variableString", "text", "createString", "createText"],
    "scope": "kotlin",
    "body": ["var ${1:myString} = \"${2:myValue}\""],
    "description": "Creates a string variable in Kotlin using the var keyword."
  },
  "Kotlin Create Multi-Line String Variable": {
    "prefix": ["cotrVarStringMulti", "multiLineString", "varStringMulti", "stringVariableMulti", "createMultiLineString"],
    "scope": "kotlin",
    "body": [
      "var ${1:myString} = \"\"\"",
      "${2:Line 1}",
      "${3:Line 2}",
      "${4:Line 3}",
      "\"\"\""
    ],
    "description": "Creates a multi-line string variable in Kotlin using the var keyword."
  },
  "Kotlin Create Integer Variable": {
    "prefix": ["cotrVarInt", "integer", "int", "variableInt", "intVariable", "createInt"],
    "scope": "kotlin",
    "body": ["var ${1:myInt} = ${2:0}"],
    "description": "Creates an integer variable in Kotlin using the var keyword."
  },
  "Kotlin Create Double Variable": {
    "prefix": ["cotrVarNum", "number",  "float", "floatVariable", "variableFloat", "variableNumber", "numberVariable"],
    "scope": "kotlin",
    "body": ["var ${1:myDouble} = ${2:0.0}"],
    "description": "Creates a double variable in Kotlin using the var keyword."
  },
  "Kotlin Create Float Variable": {
    "prefix": ["cotrVarNumAlt", "float", "variableFloat", "floatVariable"],
    "scope": "kotlin",
    "body": ["var ${1:myFloat} = ${2:0.0f}"],
    "description": "Creates a float variable in Kotlin using the var keyword."
  },
  "Kotlin Create Boolean Variable": {
    "prefix": ["cotrVarBool", "variableBool", "bool", "boolVariable", "createBool"],
    "scope": "kotlin",
    "body": ["var ${1:myBool} = ${2:true}"],
    "description": "Creates a boolean variable in Kotlin using the var keyword."
  },
  "Kotlin Create Date Variable": {
    "prefix": ["cotrVarDate", "dateVariable", "variableDate", "date"],
    "scope": "kotlin",
    "body": [
      "import java.time.LocalDate",
      "",
      "val ${1:myDate}: LocalDate = LocalDate.of(${2:year}, ${3:month}, ${4:day})"
    ],
    "description": "Creates a date variable in Kotlin."
  },
  "Kotlin Create List Variable": {
    "prefix": ["cotrVarList", "createList", "listVariable", "arrayVariable", "variableList", "variableArray", "list", "array"],
    "scope": "kotlin",
    "body": ["var ${1:myList} = listOf(${2:'item1'}, ${3:'item2'})"],
    "description": "Creates a list variable in Kotlin."
  },
  "Kotlin Create Map Variable": {
    "prefix": ["cotrVarMap", "createMap", "createStruct", "variableMap", "variableStruct", "mapVariable", "structVariable", "dictVariable", "variableDict", "createDict"],
    "scope": "kotlin",
    "body": [
      "var ${1:myMap} = mapOf(",
      "  ${2:'key1' to 'value1'},",
      "  ${3:'key2' to 'value2'},",
      "  // Add more key-value pairs here",
      ")"
    ],
    "description": "Creates a map variable in Kotlin."
  },

  "Kotlin Create Value (Constant)": {
    "prefix": ["cotrConst", "cotrVal"],
    "scope": "kotlin",
    "body": ["val ${1:myConst} = $2"],
    "description": "Creates a constant variable in Kotlin using the val keyword."
  },
  "Kotlin Generate Map": {
    "prefix": ["cotrGenMap", "generateMap"],
    "scope": "kotlin",
    "body": [
      "val ${1:myMap} = (0 until ${2:length}).associate {",
      "  'key' + it to 'value' + it",
      "}"
    ],
    "description": "Generates a map with a specific number of key-value pairs in Kotlin."
  },
  "Kotlin Generate List": {
    "prefix": ["cotrGenList", "generateList", "listGen"],
    "scope": "kotlin",
    "body": ["val ${1:myList} = List(${2:length}) {", "  'item' + it", "}"],
    "description": "Generates a list of a specific length in Kotlin."
  },
  "Kotlin Print": {
   "prefix": ["cotrPrint", "print", "log", "systemOut", "write", "consoleLog"],
    "scope": "kotlin",
    "body": ["println(${1:'Your message here'})"],
    "description": "Prints a message to the console in Kotlin."
  },
  "Kotlin Print Multi": {
    "prefix": ["cotrPrintMulti", "printMultiLine"],
    "scope": "kotlin",
    "body": [
      "println(\"\"\"",
      "${1:Line 1}",
      "${2:Line 2}",
      "${3:Line 3}",
      "\"\"\")"
    ],
    "description": "Prints a multi-line message to the console in Kotlin."
  },
  "Kotlin For Loop": {
    "prefix": ["cotrForLoop", "forLoop", "forX"],
    "scope": "kotlin",
    "body": ["for (i in ${1:0 until 10}) {", "  // Your code here", "}"],
    "description": "Creates a for loop that iterates through a set of numbers with the index in Kotlin."
  },
  "Kotlin For...In Loop": {
    "prefix": ["cotrForInLoop", "forIn", "forOf"],
    "scope": "kotlin",
    "body": ["for (item in ${1:iterable}) {", "  // Your code here", "}"],
    "description": "Iterates over an iterable object in Kotlin."
  },
  "Kotlin While Loop": {
    "prefix": ["cotrWhileLoop", "whileLoop", "whileTrue"],
    "scope": "kotlin",
    "body": ["while (${1:condition}) {", "  // Your code here", "}"],
    "description": "Creates a while loop in Kotlin."
  },
  "Kotlin When Expression": {
    "prefix": ["cotrSwitch", "switch", "switchStatement", "select", "case", "when"],
    "scope": "kotlin",
    "body": [
      "when (${1:variable}) {",
      "  ${2:value1} -> {",
      "    // Your code here",
      "  }",
      "  ${3:value2} -> {",
      "    // Your code here",
      "  }",
      "  else -> {",
      "    // Your code here",
      "  }",
      "}"
    ],
    "description": "Creates a when expression in Kotlin."
  },
  "Kotlin Function": {
    "prefix": ["cotrFunc", "function", "subprogram", "procedure", "subroutine", "method"],
    "scope": "kotlin",
    "body": [
      "fun ${2:myFunction}(${3:}): ${1:Unit} {",
      "    ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a function in Kotlin."
  },
  "Kotlin Function Args": {
    "prefix": ["cotrFuncArgs", "functionArgs", "functionWithArgs"],
    "scope": "kotlin",
    "body": [
      "// In Kotlin, functions can have arguments with default values.",
      "fun ${2:myFunction}(${3:arg1}: ${4:Type1}, ${5:arg2}: ${6:Type2} = ${7:defaultValue}): ${1:Unit} {",
      "    ${8:// Your code here}",
      "}"
    ],
    "description": "Creates a function with arguments in Kotlin, including an argument with a default value."
  },
  "Kotlin Function Named Args": {
    "prefix": ["cotrFuncArgsNamed", "functionNamedArgs"],
    "scope": "kotlin",
    "body": [
      "fun ${2:myFunction}(${3:arg1}: ${4:Type1} = ${5:defaultValue1}, ${6:arg2}: ${7:Type2} = ${8:defaultValue2}): ${1:Unit} {",
      "    ${9:// Your code here}",
      "}"
    ],
    "description": "Creates a function with named arguments and default values in Kotlin."
  },
  "Kotlin Lambda": {
    "prefix": ["cotrFuncLambda", "cotrLambda", "cotrFuncArrow"],
    "scope": "kotlin",
    "body": [
      "val ${1:myLambda}: (${2:ParameterType}) -> ${3:ReturnType} = { ${4:parameters} ->",
      "  ${5:expression}",
      "}"
    ],
    "description": "Creates a lambda function in Kotlin."
  },
  "Kotlin Anonymous Function": {
    "prefix": ["cotrFuncAnon", "anonFunc", "anonymous", "closure" ,"lambda", "functionLiteral", "cotrFuncLambda"],
    "scope": "kotlin",
    "body": [
      "fun(${1:parameters}): ${2:ReturnType} {",
      "    ${3:// Your code here}",
      "}"
    ],
    "description": "Creates an anonymous function in Kotlin."
  },
  "Kotlin Function Syntax": {
    "prefix": ["cotrFuncSyntax", "functionSyntax", "functionDocs"],
    "scope": "kotlin",
    "body": [
      "// Kotlin Function Syntax",
      "// Basic function: fun functionName(parameters): ReturnType { ... }",
      "// Function with arguments: fun functionName(arg1: Type1, arg2: Type2, ...): ReturnType { ... }",
      "// Function with named arguments and default values: fun functionName(arg1: Type1 = defaultValue1, arg2: Type2 = defaultValue2, ...): ReturnType { ... }"
    ],
    "description": "Outlines the syntax for functions in Kotlin."
  },
  "Kotlin Comment": {
    "prefix": ["cotrComment", "comment", "note"],
    "scope": "kotlin",
    "body": ["// ${1:Your comment here}"],
    "description": "Creates a single-line comment in Kotlin."
  },
  "Kotlin Multi-Line Comment": {
    "prefix": ["cotrCommentMulti", "multiLineComment", "commentMultiLine", "blockComment"],
    "scope": "kotlin",
    "body": ["/*", " * ${1:Your comment here}", " */"],
    "description": "Creates a multi-line comment in Kotlin."
  },
  "Kotlin Throw Exception": {
    "prefix": ["cotrThrow", "throwError", "throwException"],
    "scope": "kotlin",
    "body": ["throw ${1:Exception('Your message here')}"],
    "description": "Throws an exception in Kotlin."
  },
  "Kotlin Try Catch": {
    "prefix": ["cotrTryCatch", "tryCatch"],
    "scope": "kotlin",
    "body": [
      "try {",
      "  // Your code here",
      "} catch (${1:exception}) {",
      "  // Your code here",
      "}"
    ],
    "description": "Creates a try...catch block in Kotlin."
  },
  "Kotlin Enum": {
    "prefix": ["cotrEnum", "enum"],
    "scope": "kotlin",
    "body": [
      "enum class ${1:MyEnum} {",
      "  ${2:value1},",
      "  ${3:value2},",
      "  // Add more values here",
      "}"
    ],
    "description": "Creates an enum in Kotlin."
  },
  "Kotlin Class": {
    "prefix": ["cotrClass", "class", "objectTemplate"],
    "scope": "kotlin",
    "body": ["class ${1:MyClass} {", "  // Your code here", "}"],
    "description": "Creates a class in Kotlin."
  },
  "Kotlin If Statement": {
    "prefix": ["cotrIf", "ifStatement"],
    "scope": "kotlin",
    "body": ["if (${1:condition}) {", "  // Your code here", "}"],
    "description": "Creates an if statement in Kotlin."
  },
  "Kotlin If Else Statement": {
    "prefix": ["cotrIfElse", "ifElseStatement"],
    "scope": "kotlin",
    "body": [
      "if (${1:condition}) {",
      "  // Your code here",
      "} else if (${2:condition}) {",
      "  // Your code here",
      "} else {",
      "  // Your code here",
      "}"
    ],
    "description": "Creates an if...else statement in Kotlin."
  },
  "Kotlin Ternary Operator": {
    "prefix": ["cotrTernary", "ternary", "conditionalOperator"],
    "scope": "kotlin",
    "body": ["${1:condition} ? ${2:trueValue} : ${3:falseValue}"],
    "description": "Creates a ternary operator in Kotlin."
  }
}
