{
  "TypeScript Info": {
    "prefix": "cotrInfo",
    "body": [
      "Typing: Statically typed (superset of JavaScript)",
      "Paradigm: Multi-paradigm: event-driven, functional, imperative, object-oriented",
      "Compilation: Transpiled to JavaScript",
      "Concurrency: Inherits JavaScript's event loop model for asynchronous programming"
    ],
    "description": "Provides general information about the TypeScript programming language."
  },
  "TypeScript Entry Point": {
    "prefix": "cotrEntry",
    "body": [
      "// TypeScript Entry Point",
      "// To run this program, use: `ts-node filename.ts`",
      "// Note: Ensure you have ts-node installed globally (`npm install -g ts-node`)",
      "",
      "console.log('Hello, World!');"
    ],
    "description": "Describes the entry point of a TypeScript application."
  },
  "TypeScript Project Structure (High-Level)": {
    "prefix": "cotrStructure",
    "body": [
      "// Recommended High-Level TypeScript Project Structure:",
      "",
      "// - src/",
      "//   - Contains all source code.",
      "// - node_modules/",
      "//   - Contains installed dependencies (if using a package manager).",
      "// - public/",
      "//   - Contains static assets (HTML, CSS, images).",
      "// - test/",
      "//   - Contains unit tests.",
      "",
      "// Note:",
      "// - This is a basic structure; adjust based on project complexity and preferences."
    ],
    "description": "Explains a high-level project structure for TypeScript."
  },
  "TypeScript Project Structure (Feature/Module)": {
    "prefix": "cotrStructureFeatures",
    "body": [
      "// Recommended TypeScript Source Directory Organization (Feature/Module):",
      "",
      "// - src/",
      "//   - rendering/",
      "//     - Contains source code for rendering features.",
      "//   - physics/",
      "//     - Contains source code for physics features.",
      "//   - networking/",
      "//     - Contains source code for networking features.",
      "//   - ... (Organize by feature or module)",
      "",
      "// Note:",
      "// - This approach promotes modularity and is suitable for larger projects."
    ],
    "description": "Explains a feature/module-based source directory organization for TypeScript."
  },
  "TypeScript Project Structure (File Type)": {
    "prefix": "cotrStructureFiles",
    "body": [
      "// Recommended TypeScript Source Directory Organization (File Type):",
      "",
      "// - src/",
      "//   - models/",
      "//     - Contains data models and classes.",
      "//   - utils/",
      "//     - Contains utility functions.",
      "//   - components/",
      "//     - Contains UI components.",
      "//   - ... (Organize by file type)",
      "",
      "// Note:",
      "// - This approach can be helpful for smaller projects or specific use cases."
    ],
    "description": "Explains a file type-based source directory organization for TypeScript."
  },
  "TypeScript Mathematical Operators": {
    "prefix": "cotrOperators",
    "body": [
      "// TypeScript Mathematical Operators",
      "// Addition: +",
      "// Subtraction: -",
      "// Multiplication: *",
      "// Division: /",
      "// Modulus (Remainder): %",
      "// Exponentiation: **",
      "// Increment: Use ++ or +=",
      "// Decrement: Use -- or -=",
      "// Assignment: =",
      "// Addition assignment: +=",
      "// Subtraction assignment: -=",
      "// Multiplication assignment: *=",
      "// Division assignment: /=",
      "// Modulus assignment: %=",
      "// Exponentiation assignment: **="
    ],
    "description": "Lists the mathematical operators in TypeScript."
  },
  "TypeScript Equal To": {
    "prefix": "cotrEqual",
    "body": ["==="],
    "description": "TypeScript strict equal to operator."
  },
  "TypeScript Not Equal To": {
    "prefix": "cotrNotEqual",
    "body": ["!=="],
    "description": "TypeScript strict not equal to operator."
  },
  "TypeScript Boolean Operators": {
    "prefix": "cotrOperatorsBool",
    "body": [
      "// TypeScript Boolean Operators",
      "// Logical AND: &&",
      "// Logical OR: ||",
      "// Logical NOT: !",
      "// Equality: ==",
      "// Strict Equality: ===",
      "// Inequality: !=",
      "// Strict Inequality: !==",
      "// Greater than: >",
      "// Less than: <",
      "// Greater than or equal to: >=",
      "// Less than or equal to: <="
    ],
    "description": "Lists the boolean operators in TypeScript."
  },  
  "TypeScript Type Check": {
    "prefix": "cotrTypeCheck",
    "body": ["typeof ${1:variable}"],
    "description": "Gets the type of a variable in TypeScript."
  },
  "TypeScript Type Comparison": {
    "prefix": "cotrTypeCompare",
    "body": [
      "// Check if two variables have the same type:",
      "if (typeof ${1:variable1} === typeof ${2:variable2}) {",
      "  // Your code here",
      "}"
    ],
    "description": "Compares the types of two variables in TypeScript."
  },
  "TypeScript Type Conversion": {
    "prefix": ["cotrTypeConvert", "cotrTypeCast", "cotrConvert", "cotrCast"],
    "body": [
      "// TypeScript Type Conversion:",
      "",
      "// Implicit conversions (TypeScript performs automatically):",
      "// - Can be unpredictable, especially with loose equality (==).",
      "",
      "// Explicit conversions:",
      "// - variable as Type  // Type assertion (can throw an error if conversion fails)",
      "// - <Type>variable  // Type casting (can throw an error if conversion fails)",
      "",
      "// Note:",
      "// - Be aware of implicit conversions and use explicit conversions when necessary for clarity and control."
    ],
    "description": "Explains type conversion in TypeScript."
  },
  "TypeScript Types": {
    "prefix": "cotrTypes",
    "body": [
      "$BLOCK_COMMENT_START",
      "Basic types in TypeScript:",
      "- number: Numeric data type",
      "- string: Textual data type",
      "- boolean: True or false value",
      "- array: Array of values",
      "- tuple: Fixed-length array of values",
      "- enum: Enumeration of named values",
      "- any: Any data type",
      "- void: Absence of a value",
      "- null: Null value",
      "- undefined: Undefined value",
      "- never: Represents values that never occur",
      "- object: Non-primitive data type",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Prints out all the basic types in TypeScript."
  },
  "TypeScript String Type": {
    "prefix": "cotrTypesString",
    "body": ["string"],
    "description": "The TypeScript string type."
  },
  "TypeScript Number Type": {
    "prefix": "cotrTypesNum",
    "body": ["number"],
    "description": "The TypeScript number type."
  },
  "TypeScript Boolean Type": {
    "prefix": "cotrTypesBool",
    "body": ["boolean"],
    "description": "The TypeScript boolean type."
  },
  "TypeScript Boolean True": {
    "prefix": "cotrTypesBoolTrue",
    "body": ["true"],
    "description": "The TypeScript true value."
  },
  "TypeScript Boolean False": {
    "prefix": "cotrTypesBoolFalse",
    "body": ["false"],
    "description": "The TypeScript false value."
  },
  "TypeScript Date Type": {
    "prefix": "cotrTypesDate",
    "body": ["Date"],
    "description": "The TypeScript Date object."
  },
  "TypeScript Map Type": {
    "prefix": "cotrTypesMap",
    "body": ["Map<${1:KeyType}, ${2:ValueType}>"],
    "description": "The TypeScript Map type."
  },
  "TypeScript List Type": {
    "prefix": "cotrTypesList",
    "body": ["Array<${1:Type}>"],
    "description": "The TypeScript Array type, commonly used as a list."
  },
  "TypeScript Date Now": {
    "prefix": "cotrNow",
    "body": ["new Date()"],
    "description": "Gets the current date and time in TypeScript."
  },
  "TypeScript Null Type": {
    "prefix": "cotrNull",
    "body": ["null"],
    "description": "The TypeScript null type."
  },
  "TypeScript Dynamic Type": {
    "prefix": "cotrAny",
    "body": ["any"],
    "description": "The TypeScript any type."
  },
  "TypeScript Interpolate String": {
    "prefix": "cotrInterpolate",
    "body": ["`Hello, ${1:name}!`"],
    "description": "Interpolates a string in TypeScript."
  },
  "TypeScript Concatenate Strings": {
    "prefix": "cotrConcat",
    "body": ["'Hello, ' + ${1:name} + '!'"],
    "description": "Concatenates strings in TypeScript."
  },
  "TypeScript Create Variable": {
    "prefix": "cotrVar",
    "body": ["let ${1:myVar} = $2;"],
    "description": "Creates a variable in TypeScript using the let keyword."
  },
  "Variable Declaration Syntax": {
    "prefix": "cotrVarSyntax",
    "body": [
      "// TypeScript Variable Declaration Syntax:",
      "",
      "// - var: (Scope: Function or Global)",
      "//   - Can be reassigned and redeclared within its scope.",
      "//   - Use with caution due to potential scoping issues.",
      "",
      "// - let: (Scope: Block)",
      "//   - Can be reassigned but not redeclared within its scope.",
      "//   - Preferred for variables that need to be reassigned.",
      "",
      "// - const: (Scope: Block)",
      "//   - Cannot be reassigned or redeclared.",
      "//   - Use for values that should remain constant.",
      "",
      "// Note:",
      "// - Use 'let' for most variable declarations.",
      "// - Use 'const' for values that should not change."
    ],
    "description": "Explains TypeScript variable declaration syntax"
  },
  "TypeScript Create Typed Variable": {
    "prefix": "cotrVarTyped",
    "body": ["let ${1:myVar}: ${2:Type} = $3;"],
    "description": "Creates a typed variable in TypeScript."
  },
  "TypeScript Create Nullable Variable": {
    "prefix": "cotrVarNullable",
    "body": ["let ${1:myVar}: ${2:Type} | null = $3;"],
    "description": "Creates a nullable variable in TypeScript."
  },
  "TypeScript Create String Variable": {
    "prefix": "cotrVarString",
    "body": ["let ${1:myString}: string = ${2:'myValue'};"],
    "description": "Creates a string variable in TypeScript."
  },
  "TypeScript Create Multi-Line String Variable": {
    "prefix": "cotrVarStringMulti",
    "body": [
      "let ${1:myString}: string = `",
      "${2:Line 1}",
      "${3:Line 2}",
      "${4:Line 3}",
      "`;"
    ],
    "description": "Creates a multi-line string variable in TypeScript."
  },
  "TypeScript Create Number Variable": {
    "prefix": "cotrVarNumber",
    "body": ["let ${1:myNumber}: number = ${2:0};"],
    "description": "Creates a number variable in TypeScript."
  },
  "TypeScript Create Boolean Variable": {
    "prefix": "cotrVarBool",
    "body": ["let ${1:myBoolean}: boolean = ${2:true};"],
    "description": "Creates a boolean variable in TypeScript."
  },
  "TypeScript Create List Variable": {
    "prefix": "cotrVarList",
    "body": [
      "let ${1:myList}: ${2:type}[] = [",
      "  ${3:'item1'},",
      "  ${4:'item2'},",
      "  // Add more items here",
      "];"
    ],
    "description": "Creates an array (list) variable in TypeScript."
  },
  "TypeScript Create Date Variable": {
    "prefix": "cotrVarDate",
    "body": [
      "let ${1:myDate}: Date = new Date(${2:year}, ${3:month} - 1, ${4:day});"
    ],
    "description": "Creates a date variable in TypeScript."
  },
  "TypeScript Create Map Variable": {
    "prefix": "cotrVarMap",
    "body": [
      "let ${1:myMap}: { [key: string]: ${2:type} } = {",
      "  ${3:'key1'}: ${4:'value1'},",
      "  ${5:'key2'}: ${6:'value2'},",
      "  // Add more key-value pairs here",
      "};"
    ],
    "description": "Creates a map variable in TypeScript."
  },
  "TypeScript Create Map Variable (Map Class)": {
    "prefix": "cotrVarMapClass",
    "body": [
      "let ${1:myMap} = new Map<string, ${2:type}>([",
      "  ['${3:key1}', ${4:'value1'}],",
      "  ['${5:key2}', ${6:'value2}']",
      "]);"
    ],
    "description": "Creates a map variable using the Map class in TypeScript."
  },
  "TypeScript Create Constant": {
    "prefix": "cotrConst",
    "body": ["const ${1:myConst} = $2;"],
    "description": "Creates a constant variable in TypeScript using the const keyword."
  },
  "TypeScript Static Variable": {
    "prefix": "cotrVarStatic",
    "body": [
      "static ${3:myStaticVar}: ${2:type} = ${4:value};",
      "",
      "// Access the static variable",
      "// MyClass.${3:myStaticVar}"
    ],
    "description": "Creates a static variable in a TypeScript class."
  },
  "TypeScript Generate Object Map": {
    "prefix": "cotrGenMap",
    "body": [
      "const ${1:myMap} = Object.fromEntries(",
      "  Array.from({ length: ${2:length} }, (_, index) => [`key${index}`, `value${index}`])",
      ");"
    ],
    "description": "Generates an object map with a specific number of key-value pairs in TypeScript."
  },
  "TypeScript Generate Array": {
    "prefix": "cotrGenList",
    "body": [
      "const ${1:myList} = Array.from({ length: ${2:length} }, (_, index) => ${3:'item'} + index);"
    ],
    "description": "Generates an array (list) of a specific length in TypeScript."
  },
  "TypeScript Print": {
    "prefix": "cotrPrint",
    "body": ["console.log(${1:'Your message here'});"],
    "description": "Prints a message to the console in TypeScript."
  },
  "TypeScript Print Multi": {
    "prefix": "cotrPrintMulti",
    "body": [
      "console.log(`",
      "${1:Line 1}",
      "${2:Line 2}",
      "${3:Line 3}",
      "`);"
    ],
    "description": "Prints a multi-line message to the console in TypeScript."
  },
  "TypeScript For Loop": {
    "prefix": "cotrForLoop",
    "body": [
      "for (let ${1:i} = 0; $1 < ${2:10}; $1++) {",
      "  // Your code here",
      "}"
    ],
    "description": "Creates a for loop that iterates through a set of numbers with the index in TypeScript."
  },
  "TypeScript For...Of Loop": {
    "prefix": "cotrForOfLoop",
    "body": [
      "for (const item of ${1:iterable}) {",
      "  ${2:// Your code here}",
      "}"
    ],
    "description": "Iterates over an iterable object in TypeScript."
  },
  "TypeScript While Loop": {
    "prefix": "cotrWhileLoop",
    "body": ["while (${1:condition}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates a while loop in TypeScript."
  },
  "TypeScript Switch Statement": {
    "prefix": "cotrSwitch",
    "body": [
      "switch (${1:variable}) {",
      "  case ${2:value1}:",
      "    ${3:// Your code here}",
      "    break;",
      "  case ${4:value2}:",
      "    ${5:// Your code here}",
      "    break;",
      "  default:",
      "    ${6:// Your code here}",
      "}"
    ],
    "description": "Creates a switch statement in TypeScript."
  },
  "TypeScript Function": {
    "prefix": "cotrFunc",
    "body": [
      "function ${2:myFunction}(${3:parameters}): ${1:void} {",
      "  ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a function in TypeScript."
  },
  "TypeScript Function Args": {
    "prefix": "cotrFuncArgs",
    "body": [
      "// In TypeScript, functions can have arguments with default values.",
      "function ${2:myFunction}(${3:arg1}: ${4:type1}, ${5:arg2}: ${6:type2} = ${7:defaultValue}): ${1:void} {",
      "  ${8:// Your code here}",
      "}"
    ],
    "description": "Creates a function with arguments in TypeScript, including an argument with a default value."
  },
  "TypeScript Function Named Args": {
    "prefix": "cotrFuncArgsNamed",
    "body": [
      "function ${2:myFunction}({${3:arg1}, ${4:arg2}}: {${3:arg1}: ${5:type1}, ${4:arg2}: ${6:type2}}): ${1:void} {",
      "  ${7:// Your code here}",
      "}"
    ],
    "description": "Creates a function with named arguments in TypeScript."
  },
  "TypeScript Arrow Function": {
    "prefix": "cotrFuncArrow",
    "body": [
      "const ${2:myFunction} = (${3:parameters}): ${1:void} => {",
      "  ${4:// Your code here}",
      "};"
    ],
    "description": "Creates an arrow function in TypeScript."
  },
  "TypeScript Anonymous Function": {
    "prefix": "cotrFuncAnon",
    "body": [
      "(${1:parameters}): ${2:void} => {",
      "  ${3:// Your code here}",
      "};"
    ],
    "description": "Creates an anonymous arrow function in TypeScript."
  },
  "TypeScript Lambda": {
    "prefix": ["cotrFuncLambda", "cotrLambda"],
    "body": ["const ${1:myLambda} = (${2:parameters}) => ${3:expression};"],
    "description": "Creates a lambda function in TypeScript."
  },
  "TypeScript Function Syntax": {
    "prefix": "cotrFuncSyntax",
    "body": [
      "// TypeScript Function Syntax",
      "// Basic function: function functionName(parameters): ReturnType { ... }",
      "// Function with arguments: function functionName(arg1: Type1, arg2: Type2, ...): ReturnType { ... }",
      "// Function with named arguments: function functionName({arg1, arg2, ...}: {arg1: Type1, arg2: Type2, ...}): ReturnType { ... }"
    ],
    "description": "Outlines the syntax for functions in TypeScript."
  },
  "TSX Comment": {
    "prefix": "cotrComment",
    "body": ["{/* ${1:Your comment here} */}"],
    "description": "Creates a comment in a TSX file."
  },
  "TSX Multi-Line Comment": {
    "prefix": "cotrCommentMulti",
    "body": [
      "{/*",
      "  ${1:Your comment here}",
      "  ${2:Your comment here}",
      "  ${3:Your comment here}",
      "*/}"
    ],
    "description": "Creates a multi-line comment in a TSX file."
  },
  "TSX Throw Exception": {
    "prefix": "cotrThrow",
    "body": ["throw new Error('Your message here');"],
    "description": "Throws an exception in a TSX file."
  },
  "TSX Try Catch": {
    "prefix": "cotrTryCatch",
    "body": [
      "try {",
      "  ${1:// Your code here}",
      "} catch (${2:exception}) {",
      "  ${3:// Your code here}",
      "}"
    ],
    "description": "Creates a try...catch block in a TSX file."
  },
  "TypeScript Enum": {
    "prefix": "cotrEnum",
    "body": [
      "enum ${1:MyEnum} {",
      "  ${2:value1},",
      "  ${3:value2},",
      "  // Add more values here",
      "}"
    ],
    "description": "Creates an enum in TypeScript."
  },
  "TypeScript Class": {
    "prefix": "cotrClass",
    "body": ["class ${1:MyClass} {", "  ${2:// Your code here}", "}"],
    "description": "Creates a class in TypeScript."
  },
  "TypeScript If Statement": {
    "prefix": "cotrIf",
    "body": ["if (${1:condition}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates an if statement in TypeScript."
  },
  "TypeScript If Else Statement": {
    "prefix": "cotrIfElse",
    "body": [
      "if (${1:condition}) {",
      "  ${2:// Your code here}",
      "} else if (${3:condition}) {",
      "  ${4:// Your code here}",
      "} else {",
      "  ${5:// Your code here}",
      "}"
    ],
    "description": "Creates an if...else statement in TypeScript."
  },
  "TypeScript Ternary Operator": {
    "prefix": "cotrTernary",
    "body": ["${1:condition} ? ${2:trueValue} : ${3:falseValue}"],
    "description": "Creates a ternary operator in TypeScript."
  }
}
