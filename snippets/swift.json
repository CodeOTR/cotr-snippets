{
  "Swift Info": {
    "prefix": "cotrInfo",
    "body": [
      "Typing: Statically typed",
      "Paradigm: Multi-paradigm: object-oriented, functional, imperative, block-structured",
      "Compilation: Compiled",
      "Concurrency: Supports multi-threading and concurrent programming with Grand Central Dispatch (GCD) and async/await"
    ],
    "description": "Provides general information about the Swift programming language."
  },  
  "Swift Entry Point": {
    "prefix": "cotrEntry",
    "body": [
      "// Swift Entry Point",
      "// To run this program, use: `swift filename.swift`",
      "",
      "import Foundation",
      "",
      "print(\"Hello, World!\")"
    ],
    "description": "Describes the entry point of a Swift application."
  },  
  "Swift Types": {
    "prefix": "cotrTypes",
    "body": [
      "$BLOCK_COMMENT_START",
      "Swift is a statically typed language.",
      "",
      "Types in Swift include:",
      "- Int, UInt: Signed and unsigned integers",
      "- Float, Double: Floating-point numbers",
      "- Bool: Boolean",
      "- String: Textual data",
      "- Character: A single character",
      "- Array<Element>: An ordered collection of elements",
      "- Dictionary<Key, Value>: A collection of key-value pairs",
      "- Set<Element>: An unordered collection of unique elements",
      "- Optional<Type>: An optional value of Type",
      "- Tuple: A group of values",
      "- Enum: An enumeration",
      "- Struct: A structure",
      "- Class: A class",
      "- Protocol: A protocol",
      "- Closure: A closure or lambda function",
      "",
      "Read more here: https://docs.swift.org/swift-book/documentation/the-swift-programming-language/types/",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Lists the types in Swift."
  },  
  "Swift String Type": {
    "prefix": "cotrTypesString",
    "body": ["String"],
    "description": "The Swift String type."
  },
  "Swift Integer Type": {
    "prefix": "cotrTypesInt",
    "body": ["Int"],
    "description": "The Swift Int type."
  },
  "Swift Double Type": {
    "prefix": "cotrTypesNum",
    "body": ["Double"],
    "description": "The Swift Double type."
  },
  "Swift Float Type": {
    "prefix": "cotrTypesNumAlt",
    "body": ["Float"],
    "description": "The Swift Float type."
  },
  "Swift Boolean Type": {
    "prefix": "cotrTypesBool",
    "body": ["Bool"],
    "description": "The Swift Bool type."
  },
  "Swift Boolean True": {
    "prefix": "cotrTypesBoolTrue",
    "body": ["true"],
    "description": "The Swift true value."
  },
  "Swift Boolean False": {
    "prefix": "cotrTypesBoolFalse",
    "body": ["false"],
    "description": "The Swift false value."
  },
  "Swift Date Type": {
    "prefix": "cotrTypesDate",
    "body": ["Date"],
    "description": "The Swift Date struct."
  },  
  "Swift Map Type": {
    "prefix": "cotrTypesMap",
    "body": ["Dictionary<${1:KeyType}, ${2:ValueType}>"],
    "description": "The Swift Dictionary type, equivalent to a map."
  },
  "Swift List Type": {
    "prefix": "cotrTypesList",
    "body": ["Array<${1:Type}>"],
    "description": "The Swift Array type, equivalent to a list."
  },  
  "Swift Date Now": {
    "prefix": "cotrNow",
    "body": ["Date()"],
    "description": "Gets the current date and time in Swift."
  },  
  "Swift Null Type": {
    "prefix": "cotrTypesNull",
    "body": ["nil"],
    "description": "The Swift nil value."
  },
  "Swift Character Type": {
    "prefix": "cotrTypesChar",
    "body": ["Character"],
    "description": "The Swift Character type."
  },
  "Swift Dynamic Type": {
    "prefix": "cotrTypesAny",
    "body": ["Any"],
    "description": "The Swift Any type."
  },
  "Swift Interpolate String": {
    "prefix": "cotrInterpolate",
    "body": ["\"\\(${1:variable})\""],
    "description": "Interpolates a variable into a string in Swift."
  },
  "Swift Concatenate Strings": {
    "prefix": "cotrConcat",
    "body": ["\"${1:string1}\" + \"${2:string2}\""],
    "description": "Concatenates two strings in Swift."
  },
  "Swift Create Variable": {
    "prefix": "cotrVar",
    "body": ["var ${1:myVar} = $2;"],
    "description": "Creates a variable in Swift using the var keyword."
  },
  "Swift Create Typed Variable": {
    "prefix": "cotrVarTyped",
    "body": ["var ${1:myVar}: ${2:Type} = $3"],
    "description": "Creates a typed variable in Swift."
  },  
  "Swift Create Nullable Variable": {
    "prefix": "cotrVarNullable",
    "body": ["var ${1:myVar}: ${2:Type}? = $3"],
    "description": "Creates a nullable variable in Swift."
  },  
  "Swift Create String Variable": {
    "prefix": "cotrVarString",
    "body": ["var ${1:myString} = ${2:'Your string here'};"],
    "description": "Creates a string variable in Swift."
  },
  "Swift Create Multi-Line String Variable": {
    "prefix": "cotrVarStringMulti",
    "body": [
      "var ${1:myString} = \"\"\"",
      "${2:Line 1}",
      "${3:Line 2}",
      "${4:Line 3}",
      "\"\"\";"
    ],
    "description": "Creates a multi-line string variable in Swift."
  },
  "Swift Create Integer Variable": {
    "prefix": "cotrVarInt",
    "body": ["var ${1:myInt} = ${2:0};"],
    "description": "Creates an integer variable in Swift."
  },
  "Swift Create Double Variable": {
    "prefix": "cotrVarNum",
    "body": ["var ${1:myDouble} = ${2:0.0};"],
    "description": "Creates a double variable in Swift."
  },
  "Swift Create Float Variable": {
    "prefix": "cotrVarNumAlt",
    "body": ["var ${1:myFloat} = ${2:0.0}f;"],
    "description": "Creates a float variable in Swift."
  },
  "Swift Create Boolean Variable": {
    "prefix": "cotrVarBool",
    "body": ["var ${1:myBool} = ${2:true};"],
    "description": "Creates a boolean variable in Swift."
  },
  "Swift Create Date Variable": {
    "prefix": "cotrVarDate",
    "body": [
      "let ${1:myDate} = Date()"
    ],
    "description": "Creates a date variable in Swift."
  },  
  "Swift Create List Variable": {
    "prefix": "cotrVarList",
    "body": [
      "var ${1:myArray} = [${2:'item1'}, ${3:'item2'}, ${4:'item3'}];"
    ],
    "description": "Creates an array variable in Swift."
  },
  "Swift Create Dictionary Variable": {
    "prefix": "cotrVarMap",
    "body": [
      "var ${1:myDictionary} = [",
      "  ${2:'key1'}: ${3:'value1'},",
      "  ${4:'key2'}: ${5:'value2'}",
      "];"
    ],
    "description": "Creates a dictionary variable in Swift."
  },
  "Swift Create Constant": {
    "prefix": "cotrConst",
    "body": ["let ${1:myConst} = $2;"],
    "description": "Creates a constant variable in Swift using the let keyword."
  },
  "Swift Static Variable": {
    "prefix": "cotrStaticVar",
    "body": [
      "static ${2:var} ${3:myStaticVar} = ${4:value};",
      "",
      "// Access the static variable",
      "// MyClass.${3:myStaticVar}"
    ],
    "description": "Creates a static variable in a Swift class."
  },
  "Swift Generate Array": {
    "prefix": "cotrGenList",
    "body": [
      "var ${1:myArray} = Array(repeating: ${2:'item'}, count: ${3:5});"
    ],
    "description": "Generates an array of a specific length in Swift."
  },
  "Swift Generate Dictionary": {
    "prefix": "cotrGenMap",
    "body": [
      "var ${1:myDictionary} = ",
      "Dictionary(uniqueKeysWithValues: zip([${2:'key1'}, ${3:'key",
      "2'}], [${4:'value1'}, ${5:'value2'}]));"
    ],
    "description": "Generates a dictionary with a specific number of key-value pairs in Swift."
  },
  "Swift Print": {
    "prefix": "cotrPrint",
    "body": ["print(${1:\"Your message here\"})"],
    "description": "Prints a message to the console in Swift."
  },
  "Swift Print Multi": {
    "prefix": "cotrPrintMulti",
    "body": [
      "print(\"\"\"",
      "${1:Line 1}",
      "${2:Line 2}",
      "${3:Line 3}",
      "\"\"\")"
    ],
    "description": "Prints a multi-line message to the console in Swift."
  },  
  "Swift For Loop": {
    "prefix": "cotrForLoop",
    "body": ["for ${1:i} in ${2:0..<10} {", "  // Your code here", "}"],
    "description": "Creates a for loop that iterates through a set of numbers with the index in Swift."
  },
  "Swift For...In Loop": {
    "prefix": "cotrForInLoop",
    "body": [
      "for ${1:item} in ${2:iterable} {",
      "  ${3:// Your code here}",
      "}"
    ],
    "description": "Iterates over an iterable object in Swift."
  },
  "Swift While Loop": {
    "prefix": "cotrWhileLoop",
    "body": ["while ${1:condition} {", "  ${2:// Your code here}", "}"],
    "description": "Creates a while loop in Swift."
  },
  "Swift Switch Statement": {
    "prefix": "cotrSwitch",
    "body": [
      "switch ${1:variable} {",
      "  case ${2:value1}:",
      "    ${3:// Your code here}",
      "    break",
      "  case ${4:value2}:",
      "    ${5:// Your code here}",
      "    break",
      "  default:",
      "    ${6:// Your code here}",
      "}"
    ],
    "description": "Creates a switch statement in Swift."
  },
  "Swift Function": {
    "prefix": "cotrFunc",
    "body": [
      "func ${2:myFunction}(${3:parameters}) -> ${1:Void} {",
      "    ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a function in Swift."
  }, 
  "Swift Function Args": {
    "prefix": "cotrFuncArgs",
    "body": [
      "// In Swift, functions can have arguments with default values.",
      "func ${2:myFunction}(${3:arg1}: ${4:Type1}, ${5:arg2}: ${6:Type2} = ${7:defaultValue}) -> ${1:Void} {",
      "    ${8:// Your code here}",
      "}"
    ],
    "description": "Creates a function with arguments in Swift, including an argument with a default value."
  },     
  "Swift Function Named Args": {
    "prefix": "cotrFuncArgsNamed",
    "body": [
      "func ${2:myFunction}(${3:arg1Name} ${3:arg1}: ${4:Type1}, ${5:arg2Name} ${5:arg2}: ${6:Type2}) -> ${1:Void} {",
      "    ${7:// Your code here}",
      "}"
    ],
    "description": "Creates a function with named arguments in Swift."
  },  
  "Swift Closure": {
    "prefix": ["cotrLambda", "cotrClosure", "cotrFuncLambda", "cortFuncArrow"],
    "body": [
      "let ${1:myClosure} = { (${2:parameters}) -> ${3:ReturnType} in",
      "  ${4:return expression}",
      "}"
    ],
    "description": "Creates a closure (lambda function) in Swift."
  },
  "Swift Anonymous Function": {
    "prefix": "cotrFuncAnon",
    "body": [
      "{ (${1:parameters}) -> ${2:ReturnType} in",
      "    ${3:// Your code here}",
      "}"
    ],
    "description": "Creates an anonymous function (closure) in Swift."
  },  
  "Swift Function Syntax": {
    "prefix": "cotrFuncSyntax",
    "body": [
      "// Swift Function Syntax",
      "// Basic function: func functionName(parameters) -> ReturnType { ... }",
      "// Function with arguments: func functionName(arg1: Type1, arg2: Type2, ...) -> ReturnType { ... }",
      "// Function with named arguments: func functionName(arg1Name arg1: Type1, arg2Name arg2: Type2, ...) -> ReturnType { ... }"
    ],
    "description": "Outlines the syntax for functions in Swift."
  },  
  "Swift Comment": {
    "prefix": "cotrComment",
    "body": ["// ${1:Your comment here}"],
    "description": "Creates a single-line comment in Swift."
  },
  "Swift Multi-Line Comment": {
    "prefix": "cotrCommentMulti",
    "body": ["/*", " * ${1:Your comment here}", " */"],
    "description": "Creates a multi-line comment in Swift."
  },
  "Swift Throw Exception": {
    "prefix": "cotrThrow",
    "body": ["throw ${1:Error('Your message here')};"],
    "description": "Throws an exception in Swift."
  },
  "Swift Try Catch": {
    "prefix": "cotrTryCatch",
    "body": [
      "do {",
      "  ${1:// Your code here}",
      "} catch ${2:exception} {",
      "  ${3:// Your code here}",
      "}"
    ],
    "description": "Creates a try...catch block in Swift."
  },
  "Swift Enum": {
    "prefix": "cotrEnum",
    "body": [
      "enum ${1:MyEnum} {",
      "  ${2:value1},",
      "  ${3:value2},",
      "  // Add more values here",
      "}"
    ],
    "description": "Creates an enum in Swift."
  },
  "Swift Class": {
    "prefix": "cotrClass",
    "body": ["class ${1:MyClass} {", "  ${2:// Your code here}", "}"],
    "description": "Creates a class in Swift."
  },
  "Swift If Statement": {
    "prefix": "cotrIf",
    "body": ["if ${1:condition} {", "  ${2:// Your code here}", "}"],
    "description": "Creates an if statement in Swift."
  },
  "Swift If Else Statement": {
    "prefix": "cotrIfElse",
    "body": [
      "if ${1:condition} {",
      "  ${2:// Your code here}",
      "} else if ${3:condition} {",
      "  ${4:// Your code here}",
      "} else {",
      "  ${5:// Your code here}",
      "}"
    ],
    "description": "Creates an if...else statement in Swift."
  },
  "Swift Ternary Operator": {
    "prefix": "cotrTernary",
    "body": ["${1:condition} ? ${2:trueValue} : ${3:falseValue}"],
    "description": "Creates a ternary operator in Swift."
  }
}
