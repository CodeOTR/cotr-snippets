{
  "Python Info": {
    "prefix": ["cotrInfo", "languageInfo", "info"],
    "body": [
      "Typing: Dynamically typed. Use the Typing module to specify types.",
      "Paradigm: Multi-paradigm: object-oriented, imperative, functional, procedural, reflective",
      "Compilation: Interpreted",
      "Concurrency: Supports multi-threading and asynchronous programming with asyncio"
    ],
    "description": "Provides general information about the Python programming language."
  },
  "Python Entry Point": {
    "prefix": ["cotrEntry", "entry", "start", "startingPoint"],
    "body": [
      "# Python Entry Point",
      "# To run this program, use: `python filename.py`",
      "",
      "if __name__ == '__main__':",
      "    # Your code here",
      ""
    ],
    "description": "Creates the entry point of a Python application."
  },
  "Python Project Structure (High-Level)": {
    "prefix": ["cotrStructure", "structure", "architecture"],
    "body": [
      "# Recommended High-Level Python Project Structure:",
      "",
      "# - /",
      "#   - README.md: Project description and instructions.",
      "#   - setup.py: Package and dependency configuration.",
      "#   - requirements.txt: List of dependencies for pip.",
      "#   - .env: Environment-specific configurations.",
      "",
      "# - src/",
      "#   - Contains all the source code of the project.",
      "#   - /package_name/",
      "#     - __init__.py: Makes Python treat directories as containing packages.",
      "#     - main.py: Entry point of the application.",
      "#     - /module1/",
      "#     - /module2/",
      "",
      "# - tests/",
      "#   - Contains test files.",
      "#   - /unit/",
      "#   - /integration/",
      "",
      "# - docs/",
      "#   - Documentation files for the project.",
      "",
      "# - data/",
      "#   - Data files used in the project (if applicable).",
      "",
      "# - scripts/",
      "#   - Utility scripts for deployment, setup, etc.",
      "",
      "# Note:",
      "# - This structure is adaptable and can be modified according to the project's needs.",
      "# - Use virtual environments to isolate project-specific dependencies."
    ],
    "description": "Explains a high-level project structure for Python."
  }
,  
  "Python Mathematical Operators": {
    "prefix": ["cotrOperators", "operators", "mathDocs"],
    "body": [
      "# Python Mathematical Operators",
      "# Addition: +",
      "# Subtraction: -",
      "# Multiplication: *",
      "# Division: /",
      "# Modulus (Remainder): %",
      "# Exponentiation: **",
      "# Floor Division: //",
      "# Increment: Not supported in Python",
      "# Decrement: Not supported in Python",
      "# Assignment: =",
      "# Addition assignment: +=",
      "# Subtraction assignment: -=",
      "# Multiplication assignment: *=",
      "# Division assignment: /=",
      "# Modulus assignment: %=",
      "# Exponentiation assignment: **=",
      "# Floor Division assignment: //="
    ],
    "description": "Lists the mathematical operators in Python."
  },
  "Python Equal To": {
    "prefix": ["cotrEqual", "equal"],
    "body": ["=="],
    "description": "Python equal to operator."
  },
  "Python Not Equal To": {
    "prefix": ["cotrNotEqual", "notEqual", "doesNotEqual"],
    "body": ["!="],
    "description": "Python not equal to operator."
  },
  "Python Boolean Operators": {
    "prefix": ["cotrOperatorsBool", "booleanOperators", "logic"],
    "body": [
      "# Python Boolean Operators",
      "# Logical AND: and",
      "# Logical OR: or",
      "# Logical NOT: not",
      "# Equality: ==",
      "# Inequality: !=",
      "# Greater than: >",
      "# Less than: <",
      "# Greater than or equal to: >=",
      "# Less than or equal to: <="
    ],
    "description": "Lists the boolean operators in Python."
  },
  "Python Type Check": {
    "prefix": ["cotrTypeCheck", "checkType", "getType", "typeOf"],
    "body": ["type(${1:variable})"],
    "description": "Gets the type of a variable in Python."
  },
  "Python Type Comparison": {
    "prefix": ["cotrTypeCompare", "compareTypes"],
    "body": [
      "# Check if two variables have the same type:",
      "if type(${1:variable1}) is type(${2:variable2}):",
      "  # Your code here"
    ],
    "description": "Compares the types of two variables in Python."
  },
  "Python Type Conversion": {
    "prefix": ["cotrTypeConvert", "cotrTypeCast", "cotrConvert", "cotrCast"],
    "body": [
      "# Python Type Conversion:",
      "",
      "# Implicit conversions (Python performs automatically):",
      "# - Can be unpredictable, especially with loose equality (==).",
      "",
      "# Explicit conversions:",
      "# - int(variable)  // Converts to integer",
      "# - float(variable)  // Converts to float",
      "# - str(variable)  // Converts to string",
      "# - bool(variable)  // Converts to boolean",
      "",
      "# Note:",
      "# - Be aware of implicit conversions and use explicit conversions when necessary for clarity and control."
    ],
    "description": "Explains type conversion in Python."
  },
  "Python Types": {
    "prefix": ["cotrTypes", "types", "allTypes", "languageTypes", "builtInTypes", "dataTypes"],
    "body": [
      "$BLOCK_COMMENT_START",
      "Python is a dynamically typed language.",
      "",
      "Some common types in Python include:",
      "- int: Integer",
      "- float: Floating-point number",
      "- complex: Complex number",
      "- str: String",
      "- bool: Boolean",
      "- list: List",
      "- tuple: Tuple",
      "- set: Set",
      "- dict: Dictionary",
      "- NoneType: Represents the absence of a value",
      "- bytes: Byte sequence",
      "- bytearray: Mutable byte sequence",
      "- memoryview: Memory view object",
      "- range: Range object",
      "- frozenset: Immutable set",
      "- object: Base class for all Python classes",
      "- function: Function object",
      "- type: Type object",
      "- class: Custom class defined by the user",
      "- module: Module object",
      "- file: File object",
      "- Exception: Base class for all exceptions",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Lists some common types in Python."
  },
  "Python String Type": {
    "prefix": ["cotrTypesString", "stringType", "typeString", "textType", "typeText"],
    "body": ["str"],
    "description": "The Python string type."
  },
  "Python Integer Type": {
    "prefix": ["cotrTypesInt", "intType", "typeInt"],
    "body": ["int"],
    "description": "The Python int type."
  },
  "Python Float Type": {
    "prefix": ["cotrTypesNum", "numberType", "typeNumber", "doubleType", "typeDouble"],
    "body": ["float"],
    "description": "The Python float type."
  },
  "Python Boolean Type": {
    "prefix": ["cotrTypesBool", "booleanType", "typeBool"],
    "body": ["bool"],
    "description": "The Python bool type."
  },
  "Python Boolean True": {
    "prefix": ["cotrTypesBoolTrue", "true", "booleanTrue", "on"],
    "body": ["True"],
    "description": "The Python True value."
  },
  "Python Boolean False": {
    "prefix": ["cotrTypesBoolFalse", "false", "off", "booleanFalse"],
    "body": ["False"],
    "description": "The Python False value."
  },
  "Python Date Type": {
    "prefix": ["cotrTypesDate", "dateType", "typeDate", "timeType", "timestampType", "dateTimeType"],
    "body": ["from datetime import datetime"],
    "description": "The Python datetime type from the datetime module."
  },
  "Python Date Now": {
    "prefix": ["cotrNow", "now", "currentTime", "dateNow"],
    "body": ["from datetime import datetime", "", "now = datetime.now()"],
    "description": "Gets the current date and time in Python."
  },
  "Python Null Type": {
    "prefix": ["cotrNull", "null", "nil", "none", "nothing", "option"],
    "body": ["None"],
    "description": "The Python None type."
  },
  "Python List Type": {
    "prefix": ["cotrTypesList", "listType", "typeList", "typeArray"],
    "body": ["list"],
    "description": "The Python list type."
  },
  "Python Dictionary Type": {
    "prefix": ["cotrTypesMap", "mapType", "typeMap", "hashmapType", "structType", "dictType", "typeDict", "typeScruct"],
    "body": ["dict"],
    "description": "The Python dictionary type."
  },
  "Python Dynamic Type": {
    "prefix": "cotrTypesDynamic",
    "body": [
      "Any # Note: Python is dynamically typed. Use the Typing module to specify types."
    ],
    "description": "The Python dynamic type."
  },
  "Python Interpolate String": {
    "prefix": ["cotrInterpolate", "interpolate", "variableExpansion", "variableSubstitution", "stringPlaceholders", "stringInterpolation"],
    "body": ["f\"${1:Your message here}\""],
    "description": "Interpolates a string in Python."
  },
  "Python Concatenate String": {
    "prefix": ["cotrConcat", "concatenate", "combine"],
    "body": ["\"${1:Your message here}\" + \"${2:Another message}\""],
    "description": "Concatenates strings in Python."
  },
  "Python Create Variable": {
    "prefix": ["cotrVar", "variable", "createVariable", "newVariable"],
    "body": ["${1:myVar} = ${2:value}"],
    "description": "Creates a variable in Python."
  },
  "Variable Declaration Syntax": {
    "prefix": ["cotrVarSyntax", "variableSyntax", "howToVariables", "letSyntax"],
    "body": [
      "# Python Variable Declaration Syntax:",
      "",
      "# - Python is dynamically typed, so there is no explicit type declaration.",
      "# - Variables are created when you first assign a value to them.",
      "# - Variables can be reassigned to different types.",
      "",
      "# Note:",
      "# - Python does not have direct equivalents to 'var', 'let', or 'const'.",
      "# - Use descriptive variable names to improve code readability."
    ],
    "description": "Explains Python variable declaration syntax"
  },
  "Python Create Typed Variable": {
    "prefix": ["cotrVarTyped", "typedVariable", "variableWithType"],
    "body": ["${1:my_var} = $2  # Note: Python is dynamically typed."],
    "description": "Creates a variable in Python."
  },
  "Python Create Nullable Variable": {
    "prefix": ["cotrVarNullable", "variableNullable", "nullableVariable"],
    "body": ["${1:my_var} = None  # Variable can be set to None."],
    "description": "Creates a nullable variable in Python."
  },
  "Python Create String Variable": {
    "prefix": ["cotrVarString", "string", "stringVariable", "variableString", "text", "createString", "createText"],
    "body": ["${1:myString} = ${2:''}"],
    "description": "Creates a string variable in Python."
  },
  "Python Create Multi-Line String Variable": {
    "prefix": ["cotrVarStringMulti", "multiLineString", "varStringMulti", "stringVariableMulti", "createMultiLineString"],
    "body": [
      "${1:myString} = '''",
      "${2:Line 1}",
      "${3:Line 2}",
      "${4:Line 3}",
      "'''"
    ],
    "description": "Creates a multi-line string variable in Python."
  },
  "Python Create Integer Variable": {
    "prefix": ["cotrVarNum", "number", "variableNumber", "numberVariable"],
    "body": ["${1:myInt} = ${2:0}"],
    "description": "Creates an integer variable in Python."
  },
  "Python Create Float Variable": {
    "prefix": "cotrVarNumAlt",
    "body": ["${1:myFloat} = ${2:0.0}"],
    "description": "Creates a float variable in Python."
  },
  "Python Create Boolean Variable": {
    "prefix": ["cotrVarBool", "variableBool", "bool", "boolVariable", "createBool"],
    "body": ["${1:myBool} = ${2:True}"],
    "description": "Creates a boolean variable in Python."
  },
  "Python Create Date Variable": {
    "prefix": ["cotrVarDate", "dateVariable", "variableDate", "date"],
    "body": [
      "from datetime import datetime",
      "",
      "my_date = datetime(${1:year}, ${2:month}, ${3:day})"
    ],
    "description": "Creates a date variable in Python."
  },
  "Python Create List Variable": {
    "prefix": ["cotrVarList", "createList", "listVariable", "arrayVariable", "variableList", "variableArray", "list", "array"],
    "body": ["${1:myList} = [${2:1}, ${3:2}, ${4:3}]"],
    "description": "Creates a list variable in Python."
  },
  "Python Create Dictionary Variable": {
    "prefix": ["cotrVarMap", "createMap", "createStruct", "variableMap", "variableStruct", "mapVariable", "structVariable", "dictVariable", "variableDict", "createDict"],
    "body": [
      "${1:myDict} = {",
      "    '${2:key1}': ${3:value1},",
      "    '${4:key2}': ${5:value2}",
      "}"
    ],
    "description": "Creates a dictionary variable in Python."
  },
  "Python Create Constant": {
    "prefix": ["cotrConst", "constant"],
    "body": ["${1:MY_CONST} = ${2:value}"],
    "description": "Creates a constant variable in Python."
  },
  "Python Print": {
   "prefix": ["cotrPrint", "print", "log", "systemOut", "write"],
    "body": ["print(${1:'Your message here'})"],
    "description": "Prints a message to the console in Python."
  },
  "Python Print Multi": {
    "prefix": ["cotrPrintMulti", "printMultiLine"],
    "body": ["print('''", "${1:Line 1}", "${2:Line 2}", "${3:Line 3}", "''')"],
    "description": "Prints a multi-line message to the console in Python."
  },
  "Python For Loop": {
    "prefix": ["cotrForLoop", "forLoop", "forX"],
    "body": ["for ${1:i} in range(${2:10}):", "  # Your code here"],
    "description": "Creates a for loop that iterates through a set of numbers with the index in Python."
  },
  "Python For...In Loop": {
    "prefix": "cotrForInLoop",
    "body": ["for ${1:item} in ${2:iterable}:", "  # Your code here"],
    "description": "Iterates over an iterable object in Python."
  },
  "Python While Loop": {
    "prefix": ["cotrWhileLoop", "whileLoop", "whileTrue"],
    "body": ["while ${1:condition}:", "  # Your code here"],
    "description": "Creates a while loop in Python."
  },
  "Python If Statement": {
    "prefix": ["cotrIf", "ifStatement"],
    "body": ["if ${1:condition}:", "  # Your code here"],
    "description": "Creates an if statement in Python."
  },
  "Python If Else Statement": {
    "prefix": ["cotrIfElse", "ifElseStatement"],
    "body": [
      "if ${1:condition}:",
      "  # Your code here",
      "else:",
      "  # Your code here"
    ],
    "description": "Creates an if...else statement in Python."
  },
  "Python Ternary Operator": {
    "prefix": ["cotrTernary", "ternary", "conditionalOperator"],
    "body": ["${1:trueValue} if ${2:condition} else ${3:falseValue}"],
    "description": "Creates a ternary operator in Python."
  },
  "Python Function": {
    "prefix": ["cotrFunc", "function", "subprogram", "procedure", "subroutine", "method"],
    "body": [
      "def ${2:my_function}(${3:parameters}):",
      "    ${4:# Your code here}",
      ""
    ],
    "description": "Creates a function in Python."
  },
  "Python Function Args": {
    "prefix": ["cotrFuncArgs", "functionArgs", "functionWithArgs"],
    "body": [
      "# In Python, functions can have arguments with default values.",
      "def ${2:my_function}(${3:arg1}, ${4:arg2}=${5:'defaultVal'}):",
      "    ${6:# Your code here}",
      ""
    ],
    "description": "Creates a function with arguments in Python, including an argument with a default value."
  },
  "Python Function Named Args": {
    "prefix": ["cotrFuncArgsNamed", "functionNamedArgs"],
    "body": [
      "def ${2:my_function}(*, ${3:arg1}=${4:value1}, ${5:arg2}=${6:value2}):",
      "    ${7:# Your code here}",
      ""
    ],
    "description": "Creates a function with named arguments in Python."
  },
  "Python Arrow Function": {
    "prefix": ["cotrFuncArrow", "arrowFunc"],
    "body": [
      "${2:my_function} = lambda ${3:parameters}: ${4:// Your code here}"
    ],
    "description": "Creates an arrow function (lambda) in Python."
  },
  "Python Function Syntax": {
    "prefix": ["cotrFuncSyntax", "functionSyntax", "functionDocs"],
    "body": [
      "# Python Function Syntax",
      "# Basic function: def function_name(parameters): ...",
      "# Function with arguments: def function_name(arg1, arg2, ...): ...",
      "# Function with named arguments: def function_name(*, arg1=value1, arg2=value2, ...): ..."
    ],
    "description": "Outlines the syntax for functions in Python."
  },
  "Python Comment": {
    "prefix": ["cotrComment", "comment", "note"],
    "body": ["# ${1:Your comment here}"],
    "description": "Creates a single-line comment in Python."
  },
  "Python Multi-Line Comment": {
    "prefix": ["cotrCommentMulti", "multiLineComment", "commentMultiLine", "blockComment"],
    "body": ["'''", "${1:Your comment here}", "'''"],
    "description": "Creates a multi-line comment in Python."
  },
  "Python Throw Exception": {
    "prefix": ["cotrThrow", "throwError", "throwException"],
    "body": ["raise ${1:Exception('Your message here')}"],
    "description": "Throws an exception in Python."
  },
  "Python Try Except": {
    "prefix": ["cotrTryCatch", "tryCatch"],
    "body": [
      "try:",
      "  # Your code here",
      "except ${1:Exception} as ${2:e}:",
      "  # Your code here"
    ],
    "description": "Creates a try...except block in Python."
  },
  "Python Class": {
    "prefix": ["cotrClass", "class", "objectTemplate"],
    "body": ["class ${1:MyClass}:", "  # Your code here"],
    "description": "Creates a class in Python."
  },
  "Python Enum": {
    "prefix": ["cotrEnum", "enum"],
    "body": [
      "class ${1:MyEnum}(Enum):",
      "  ${2:value1} = ${3:1}",
      "  ${4:value2} = ${5:2}",
      "  # Add more values here"
    ],
    "description": "Creates an enum in Python."
  }
}
